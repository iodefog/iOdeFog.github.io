<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iodefog</title>
  
  <subtitle>好好学习，天天向上。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://iodefog.github.io/"/>
  <updated>2019-08-05T04:55:25.229Z</updated>
  <id>https://iodefog.github.io/</id>
  
  <author>
    <name>iodefog</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>修改git log中所有commit的用户名name和邮箱email</title>
    <link href="https://iodefog.github.io/2019/08/05/change_gitlog/"/>
    <id>https://iodefog.github.io/2019/08/05/change_gitlog/</id>
    <published>2019-08-05T04:47:59.917Z</published>
    <updated>2019-08-05T04:55:25.229Z</updated>
    
    <content type="html"><![CDATA[<h2 id="利用脚本"><a href="#利用脚本" class="headerlink" title="利用脚本"></a>利用脚本</h2><p>代码根目录下创建：<br><code>vi changelog.sh</code>, 粘贴如下代码并保存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line"></span><br><span class="line">git filter-branch --env-filter &#39;</span><br><span class="line"></span><br><span class="line">OLD_EMAIL&#x3D;&quot;lihongli@gmail.com&quot;</span><br><span class="line">CORRECT_NAME&#x3D;&quot;iodefog&quot;</span><br><span class="line">CORRECT_EMAIL&#x3D;&quot;iodefog@gmail.com&quot;</span><br><span class="line"></span><br><span class="line">if [ &quot;$GIT_COMMITTER_EMAIL&quot; &#x3D; &quot;$OLD_EMAIL&quot; ]</span><br><span class="line">then</span><br><span class="line">    export GIT_COMMITTER_NAME&#x3D;&quot;$CORRECT_NAME&quot;</span><br><span class="line">    export GIT_COMMITTER_EMAIL&#x3D;&quot;$CORRECT_EMAIL&quot;</span><br><span class="line">fi</span><br><span class="line">if [ &quot;$GIT_AUTHOR_EMAIL&quot; &#x3D; &quot;$OLD_EMAIL&quot; ]</span><br><span class="line">then</span><br><span class="line">    export GIT_AUTHOR_NAME&#x3D;&quot;$CORRECT_NAME&quot;</span><br><span class="line">    export GIT_AUTHOR_EMAIL&#x3D;&quot;$CORRECT_EMAIL&quot;</span><br><span class="line">fi</span><br><span class="line">&#39; --tag-name-filter cat -- --branches --tags</span><br></pre></td></tr></table></figure><p>把 OLD_EMAIL 、CORRECT_NAME 、 CORRECT_EMAIL 改成自己的新旧邮箱用户名即可；</p><h2 id="执行代码："><a href="#执行代码：" class="headerlink" title="执行代码："></a>执行代码：</h2><p><code>sh changelog.sh</code></p><p>如果遇到如下错误 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot create a new backup. A previous backup already exists in refs&#x2F;original&#x2F; Force overwriting the backup with -f</span><br></pre></td></tr></table></figure><p>则执行如下命令；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git filter-branch -f --index-filter &#39;git rm --cached --ignore-unmatch Rakefile&#39; HEAD</span><br></pre></td></tr></table></figure><h2 id="最后覆盖远端仓库："><a href="#最后覆盖远端仓库：" class="headerlink" title="最后覆盖远端仓库："></a>最后覆盖远端仓库：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push origin --force --all</span><br><span class="line"></span><br><span class="line">git push origin --force --tags</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;利用脚本&quot;&gt;&lt;a href=&quot;#利用脚本&quot; class=&quot;headerlink&quot; title=&quot;利用脚本&quot;&gt;&lt;/a&gt;利用脚本&lt;/h2&gt;&lt;p&gt;代码根目录下创建：&lt;br&gt;&lt;code&gt;vi changelog.sh&lt;/code&gt;, 粘贴如下代码并保存&lt;/p&gt;
&lt;figu
      
    
    </summary>
    
    
      <category term="git" scheme="https://iodefog.github.io/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>mpv播放器在mac上的使用</title>
    <link href="https://iodefog.github.io/2019/01/28/mpv/"/>
    <id>https://iodefog.github.io/2019/01/28/mpv/</id>
    <published>2019-01-28T07:45:25.259Z</published>
    <updated>2019-03-05T02:09:54.122Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="1-brew-安装"><a href="#1-brew-安装" class="headerlink" title="1. brew 安装"></a>1. brew 安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install mpv</span><br></pre></td></tr></table></figure><h3 id="2-源码安装"><a href="#2-源码安装" class="headerlink" title="2.源码安装"></a>2.源码安装</h3><p>下载源码：<a href="https://github.com/mpv-player/mpv/" target="_blank" rel="noopener">https://github.com/mpv-player/mpv/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;bootstrap.py</span><br><span class="line">$ .&#x2F;waf configure</span><br><span class="line">$ .&#x2F;waf</span><br><span class="line">$ .&#x2F;waf install</span><br></pre></td></tr></table></figure><h3 id="生成app"><a href="#生成app" class="headerlink" title="生成app"></a>生成app</h3><p>网上说可以使用 brew linkapps mpv,但是新版本的brew已经将linksapps操作给删掉了.<br>直接执行 brew cask install mpv即可, 安装之后发现mpv已经出现在了lauchpad里面并且可以打开使用了.</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 切换到mpv文件夹</span><br><span class="line">$ &#x2F;Users&#x2F;yourname&#x2F;.config&#x2F;mpv</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 创建配置文件</span><br><span class="line">$ touch mpv.conf</span><br></pre></td></tr></table></figure><p>附mpv.conf:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># mpv.conf</span><br><span class="line">hwdec&#x3D;auto</span><br><span class="line">autofit-larger&#x3D;92%</span><br><span class="line">video-sync&#x3D;display-resample</span><br><span class="line">sub-codepage&#x3D;enca:zh:utf8</span><br><span class="line">sub-auto&#x3D;fuzzy</span><br><span class="line">sub-font-size&#x3D;40</span><br><span class="line">sub-shadow-offset&#x3D;0</span><br><span class="line">sub-color&#x3D;&quot;#ffffffff&quot;</span><br><span class="line">sub-font&#x3D;&quot;STZhongsong&quot;</span><br><span class="line">sub-codepage&#x3D;utf8:gb18030</span><br><span class="line">screenshot-template&#x3D;mpv-screenshot-%f-%p</span><br><span class="line">screenshot-format&#x3D;png</span><br><span class="line">osd-font&#x3D;&quot;STZhongsong&quot;</span><br><span class="line">osd-font-size&#x3D;36</span><br><span class="line">--script&#x3D;&#x2F;Users&#x2F;yourname&#x2F;.config&#x2F;mpv&#x2F;autoload.lua</span><br></pre></td></tr></table></figure><ul><li>注意使用的时候把最后一行的yourname改掉</li></ul><h3 id="播放"><a href="#播放" class="headerlink" title="播放"></a>播放</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mpv http:&#x2F;&#x2F;dlhls.cdn.zhanqi.tv&#x2F;zqlive&#x2F;43626_vQOn9.m3u8</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;h3 id=&quot;1-brew-安装&quot;&gt;&lt;a href=&quot;#1-brew-安装&quot; class=&quot;headerlink&quot; title=&quot;1. brew
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>让你提升命令行效率的 Bash 快捷键 [完整版]</title>
    <link href="https://iodefog.github.io/2018/11/22/bashhotkey/"/>
    <id>https://iodefog.github.io/2018/11/22/bashhotkey/</id>
    <published>2018-11-22T03:11:47.785Z</published>
    <updated>2018-11-22T03:40:37.580Z</updated>
    
    <content type="html"><![CDATA[<p>生活在 Bash shell 中，熟记以下快捷键，将极大的提高你的命令行操作效率。</p><hr><h3 id="编辑命令"><a href="#编辑命令" class="headerlink" title="编辑命令"></a>编辑命令</h3><ul><li>Ctrl + a ：移到命令行首</li><li>Ctrl + e ：移到命令行尾</li><li>Ctrl + f ：按字符前移（右向）</li><li>Ctrl + b ：按字符后移（左向）</li><li>Alt + f ：按单词前移（右向）</li><li>Alt + b ：按单词后移（左向）</li><li>Ctrl + xx：在命令行首和光标之间移动</li><li>Ctrl + u ：从光标处删除至命令行首</li><li>Ctrl + k ：从光标处删除至命令行尾</li><li>Ctrl + w ：从光标处删除至字首</li><li>Alt + d ：从光标处删除至字尾</li><li>Ctrl + d ：删除光标处的字符</li><li>Ctrl + h ：删除光标前的字符</li><li>Ctrl + y ：粘贴至光标后</li><li>Alt + c ：从光标处更改为首字母大写的单词</li><li>Alt + u ：从光标处更改为全部大写的单词</li><li>Alt + l ：从光标处更改为全部小写的单词</li><li>Ctrl + t ：交换光标处和之前的字符</li><li>Alt + t ：交换光标处和之前的单词</li><li>Alt + Backspace：与 Ctrl + w <del>相同</del>类似，分隔符有些差别 [感谢 rezilla 指正]</li></ul><h3 id="重新执行命令"><a href="#重新执行命令" class="headerlink" title="重新执行命令"></a>重新执行命令</h3><ul><li>Ctrl + r：逆向搜索命令历史</li><li>Ctrl + g：从历史搜索模式退出</li><li>Ctrl + p：历史中的上一条命令</li><li>Ctrl + n：历史中的下一条命令</li><li>Alt + .：使用上一条命令的最后一个参数</li></ul><h3 id="控制命令"><a href="#控制命令" class="headerlink" title="控制命令"></a>控制命令</h3><ul><li>Ctrl + l：清屏</li><li>Ctrl + o：执行当前命令，并选择上一条命令</li><li>Ctrl + s：阻止屏幕输出</li><li>Ctrl + q：允许屏幕输出</li><li>Ctrl + c：终止命令</li><li>Ctrl + z：挂起命令</li></ul><h3 id="Bang-命令"><a href="#Bang-命令" class="headerlink" title="Bang (!) 命令"></a>Bang (!) 命令</h3><ul><li>!!：执行上一条命令</li><li>!blah：执行最近的以 blah 开头的命令，如 !ls</li><li>!blah:p：仅打印输出，而不执行</li><li>!$：上一条命令的最后一个参数，与 Alt + . 相同</li><li>!$:p：打印输出 !$ 的内容</li><li>!*：上一条命令的所有参数</li><li>!<em>:p：打印输出 !</em> 的内容</li><li>^blah：删除上一条命令中的 blah</li><li>^blah^foo：将上一条命令中的 blah 替换为 foo</li><li>^blah^foo^：将上一条命令中所有的 blah 都替换为 foo</li></ul><p>_友情提示_：</p><p>以上介绍的大多数 Bash 快捷键仅当在 emacs 编辑模式时有效，若你将 Bash 配置为 vi 编辑模式，那将遵循 vi 的按键绑定。Bash 默认为 emacs 编辑模式。如果你的 Bash 不在 emacs 编辑模式，可通过 set -o emacs 设置。</p><p>^S、^Q、^C、^Z 是由终端设备处理的，可用 stty 命令设置。</p><p>参考:<br><a href="https://linuxtoy.org/archives/bash-shortcuts.html" target="_blank" rel="noopener">https://linuxtoy.org/archives/bash-shortcuts.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;生活在 Bash shell 中，熟记以下快捷键，将极大的提高你的命令行操作效率。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;编辑命令&quot;&gt;&lt;a href=&quot;#编辑命令&quot; class=&quot;headerlink&quot; title=&quot;编辑命令&quot;&gt;&lt;/a&gt;编辑命令&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Ct
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Xcode 打包</title>
    <link href="https://iodefog.github.io/2018/11/06/xcodebuild/"/>
    <id>https://iodefog.github.io/2018/11/06/xcodebuild/</id>
    <published>2018-11-06T01:45:40.928Z</published>
    <updated>2018-11-06T01:45:40.928Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、修改bundle-identifier"><a href="#1、修改bundle-identifier" class="headerlink" title="1、修改bundle identifier"></a>1、修改bundle identifier</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#39;&#39; s&#x2F;com.lhl.oldid&#x2F;com.lhl.newid&#x2F;g &#x2F;Users&#x2F;dcw0505&#x2F;Desktop&#x2F;test&#x2F;test.xcodeproj&#x2F;project.pbxproj</span><br></pre></td></tr></table></figure><p>  s 表示替换命令，/com.lhl.oldid/表示匹配 com.lhl.oldid ，/Hcom.lhl.newid/表示把匹配替换成com.lhl.newid<br> -i 参数直接修改文件内容</p><h2 id="2-修改应用名"><a href="#2-修改应用名" class="headerlink" title="2.修改应用名"></a>2.修改应用名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;libexec&#x2F;PlistBuddy -c &quot;Set :CFBundleDisplayName $appName&quot; &#x2F;Users&#x2F;dcw0505&#x2F;Desktop&#x2F;test&#x2F;test&#x2F;info.plist</span><br></pre></td></tr></table></figure><h2 id="PlistBuddy介绍"><a href="#PlistBuddy介绍" class="headerlink" title="PlistBuddy介绍"></a>PlistBuddy介绍</h2><p>plist是Mac种非常普遍的一种文件格式，类似xml，通过键值对的方式来进行一些配置。而PlistBuddy则是Mac自带的专门解析plist的小工具，Buddy为好朋友，伙伴的意思。从名字不难看出PlistBuddy对plist文件的友好支持。</p><h3 id="查看帮助"><a href="#查看帮助" class="headerlink" title="查看帮助"></a>查看帮助</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;libexec&#x2F;PlistBuddy --help</span><br></pre></td></tr></table></figure><h3 id="打印info-plist文件"><a href="#打印info-plist文件" class="headerlink" title="打印info.plist文件"></a>打印info.plist文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;libexec&#x2F;PlistBuddy -c &quot;print&quot; info.plist</span><br></pre></td></tr></table></figure><h3 id="添加普通字段"><a href="#添加普通字段" class="headerlink" title="添加普通字段:"></a>添加普通字段:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;libexec&#x2F;PlistBuddy -c &#39;Add :Version string 1.0&#39; info.plist</span><br></pre></td></tr></table></figure><h3 id="添加数组字段，分两步走，注意：key之间用-隔开，且不能有空格："><a href="#添加数组字段，分两步走，注意：key之间用-隔开，且不能有空格：" class="headerlink" title="添加数组字段，分两步走，注意：key之间用 : 隔开，且不能有空格："></a>添加数组字段，分两步走，注意：key之间用 : 隔开，且不能有空格：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 先添加key值</span><br><span class="line">&#x2F;usr&#x2F;libexec&#x2F;PlistBuddy -c &#39;Add :Application array&#39; info.plist</span><br><span class="line"># 添加value值</span><br><span class="line">yans67deMacBook-Pro:needfiles huangyg$ &#x2F;usr&#x2F;libexec&#x2F;PlistBuddy -c &#39;Add :Application: string app1&#39; info.plist</span><br><span class="line">yans67deMacBook-Pro:needfiles huangyg$ &#x2F;usr&#x2F;libexec&#x2F;PlistBuddy -c &#39;Add :Application: string app2&#39; info.plist</span><br><span class="line">yans67deMacBook-Pro:needfiles huangyg$ &#x2F;usr&#x2F;libexec&#x2F;PlistBuddy -c &#39;Add :Application: string app3&#39; info.plist</span><br></pre></td></tr></table></figure><h3 id="添加字典字段，分两步走："><a href="#添加字典字段，分两步走：" class="headerlink" title="添加字典字段，分两步走："></a>添加字典字段，分两步走：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 先添加key值</span><br><span class="line">&#x2F;usr&#x2F;libexec&#x2F;PlistBuddy -c &#39;Add :Person dict&#39; info.plist</span><br><span class="line"># 添加value值,</span><br><span class="line">&#x2F;usr&#x2F;libexec&#x2F;PlistBuddy -c &#39;Add :Age string secret&#39; info.plist</span><br><span class="line">&#x2F;usr&#x2F;libexec&#x2F;PlistBuddy -c &#39;Add :Person:Name string yans67&#39; info.plist</span><br><span class="line">&#x2F;usr&#x2F;libexec&#x2F;PlistBuddy -c &#39;Add :Person:sex string boy&#39; info.plist</span><br><span class="line">&#x2F;usr&#x2F;libexec&#x2F;PlistBuddy -c &#39;Add :Person:weight string 65&#39; info.plist</span><br></pre></td></tr></table></figure><h3 id="打印字段相应的值："><a href="#打印字段相应的值：" class="headerlink" title="打印字段相应的值："></a>打印字段相应的值：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;libexec&#x2F;PlistBuddy -c &#39;Print :Person&#39; info.plist</span><br></pre></td></tr></table></figure><h3 id="在array中我们还可以根据下标打印某个特定的值"><a href="#在array中我们还可以根据下标打印某个特定的值" class="headerlink" title="在array中我们还可以根据下标打印某个特定的值"></a>在array中我们还可以根据下标打印某个特定的值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;libexec&#x2F;PlistBuddy -c &#39;Print :Application:2&#39; info.plist</span><br></pre></td></tr></table></figure><h3 id="删除字段相应的值："><a href="#删除字段相应的值：" class="headerlink" title="删除字段相应的值："></a>删除字段相应的值：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;libexec&#x2F;PlistBuddy -c &#39;Delete :Version&#39; info.plist</span><br></pre></td></tr></table></figure><h3 id="修改某个字段相应的值："><a href="#修改某个字段相应的值：" class="headerlink" title="修改某个字段相应的值："></a>修改某个字段相应的值：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;libexec&#x2F;PlistBuddy -c &#39;Set :Application:1 string &quot;thi is app1&quot;&#39; info.plist</span><br></pre></td></tr></table></figure><h3 id="当有两个plist文件的时候，我们可以对其进行合并操作"><a href="#当有两个plist文件的时候，我们可以对其进行合并操作" class="headerlink" title="当有两个plist文件的时候，我们可以对其进行合并操作"></a>当有两个plist文件的时候，我们可以对其进行合并操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 将A.plist 合并到 B.plist中</span><br><span class="line">&#x2F;usr&#x2F;libexec&#x2F;PlistBuddy -c &#39;Merge A.plist&#39;  B.plist</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://coolshell.cn/articles/9104.html" target="_blank" rel="noopener">https://coolshell.cn/articles/9104.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、修改bundle-identifier&quot;&gt;&lt;a href=&quot;#1、修改bundle-identifier&quot; class=&quot;headerlink&quot; title=&quot;1、修改bundle identifier&quot;&gt;&lt;/a&gt;1、修改bundle identifier&lt;/
      
    
    </summary>
    
    
      <category term="技术" scheme="https://iodefog.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>整站下载器,一个wget命令就搞定了！</title>
    <link href="https://iodefog.github.io/2018/11/06/servicedownload/"/>
    <id>https://iodefog.github.io/2018/11/06/servicedownload/</id>
    <published>2018-11-06T01:45:40.922Z</published>
    <updated>2018-11-06T01:45:40.922Z</updated>
    
    <content type="html"><![CDATA[<p>到处找整站下载器？何必那么麻烦，一个wget命令就搞定了！</p><p>或是想克隆扒皮别人的网站，或是想保持别人网站的内容保存下来离线浏览，这是我们一般都是百度搜索各种整站下载软件，挨个尝试哪个好用；</p><p>但是如果你会使用linux系统，真的没必要那么麻烦的，直接用wget一个简单的命令就可以轻松的完成整站下载任务，如果是在远程服务器上运行下载速度会非常快；</p><p>wget通常我们用来下载文件用的普通工具而已，其实只要添加参数就能够迅速完成网站克隆下载任务了；</p><p>Wget整站下载命令：<br>wget -r -p -np -k <a href="http://www.5yun.org" target="_blank" rel="noopener">www.5yun.org</a></p><p>执行完该命令后，会在当前路径下生成一个<a href="http://www.5yun.org的文件夹，所有文件全部都会下载到这个目录之中；" target="_blank" rel="noopener">www.5yun.org的文件夹，所有文件全部都会下载到这个目录之中；</a></p><p>Wget参数说明：<br>-r –recursive（递归） specify recursive download.（指定递归下载）<br>-k –convert-links（转换链接） make links in downloaded HTML point to local files.（将下载的HTML页面中的链接转换为相对链接即本地链接）<br>-p –page-requisites（页面必需元素） get all images, etc. needed to display HTML page.（下载所有的图片等页面显示所需的内容）<br>-np –no-parent（不追溯至父级） don’t ascend to the parent directory.</p><p>额外参数：</p><p>-nc  断点续传<br>-o   生成日志文件</p><p>就是这么简单，就是粗暴，就是这么有效，想扒皮仿站的站长们来测试一下下吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;到处找整站下载器？何必那么麻烦，一个wget命令就搞定了！&lt;/p&gt;
&lt;p&gt;或是想克隆扒皮别人的网站，或是想保持别人网站的内容保存下来离线浏览，这是我们一般都是百度搜索各种整站下载软件，挨个尝试哪个好用；&lt;/p&gt;
&lt;p&gt;但是如果你会使用linux系统，真的没必要那么麻烦的，直
      
    
    </summary>
    
    
      <category term="技术" scheme="https://iodefog.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Swift 学习</title>
    <link href="https://iodefog.github.io/2018/11/06/swiftlearn/"/>
    <id>https://iodefog.github.io/2018/11/06/swiftlearn/</id>
    <published>2018-11-06T01:45:40.922Z</published>
    <updated>2018-11-06T01:45:40.923Z</updated>
    
    <content type="html"><![CDATA[<p>1.通知</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 添加通知</span><br><span class="line">NotificationCenter.default.addObserver(self, selector: #selector(back), name: NSNotification.Name(rawValue: &quot;NotificationCenterName&quot;), object: nil)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 移除通知</span><br><span class="line">NotificationCenter.default.removeObserver(self);</span><br></pre></td></tr></table></figure><p>2.selector</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 方法1</span><br><span class="line">UIBarButtonItem.init(image: UIImage.init(named: &quot;fanhui&quot;), style: UIBarButtonItemStyle.done, target: self, action: #selector(self.back))</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 方法2</span><br><span class="line">cyanButton.addTarget(self, action: Selector(&quot;cyanButtonClick&quot;), for: .touchUpInside)</span><br></pre></td></tr></table></figure><p>3.类方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> open class func Test()&#123;</span><br><span class="line">        NSLog(&quot;xxxx&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#x2F;&#x2F; 调用方式</span><br><span class="line">BaseViewController.Test();</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 带2个以上参数的类方法（以 _ 起始）</span><br><span class="line">override class func tableView(_ tableView:UITableView, rowHeightFor object:Any)-&gt; CGFloat</span><br><span class="line">    &#123;</span><br><span class="line">        return 44;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>4.标注</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; OC </span><br><span class="line">#pragma mark -说明文字</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Swift</span><br><span class="line">&#x2F;&#x2F; MARK: - 说明文字,带分割线</span><br><span class="line">&#x2F;&#x2F; MARK: 说明文字,不带分割线</span><br></pre></td></tr></table></figure><p>5.@available</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; OC</span><br><span class="line">if(@available(iOS 11.0, *)) &#123; &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Swift</span><br><span class="line">if #available(iOS 11.0, *) &#123;  &#125;</span><br></pre></td></tr></table></figure><p>6.get 和 set 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var _name:String?</span><br><span class="line">    var name:String?&#123;</span><br><span class="line">        get&#123;</span><br><span class="line">            return _name;</span><br><span class="line">        &#125;</span><br><span class="line">        set&#123;</span><br><span class="line">&#x2F;&#x2F;            只要外界通过.name给name赋值，就会把值给newValue</span><br><span class="line">            _name &#x3D; newValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在开发过程中不建议这样使用，首先需要定义两个属性，很麻烦。</p><p>推荐使用这样的方式实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var gender:String?&#123;</span><br><span class="line">  willSet&#123;</span><br><span class="line">           &#x2F;&#x2F;</span><br><span class="line">           NSLog(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;)</span><br><span class="line">       &#125;</span><br><span class="line">       didSet</span><br><span class="line">       &#123;</span><br><span class="line">           NSLog(&quot;已经改变的时候&quot;, []);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 重写父类setter和getter， 使用 newValue 得到新值</span><br><span class="line">override var object: Any!&#123;</span><br><span class="line">       set &#123;</span><br><span class="line">           super.object &#x3D; newValue;</span><br><span class="line">           let item:BaseModel? &#x3D; object as? BaseModel;</span><br><span class="line">           self.titleLabel?.text &#x3D; item?.wtKey;</span><br><span class="line">       &#125;</span><br><span class="line">       get &#123;</span><br><span class="line">           return super.object;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p> 7.for 循环</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> &#x2F;&#x2F;OC风格的 for</span><br><span class="line"> </span><br><span class="line"> for var i &#x3D; 0; i &lt; 10; i++ &#123;</span><br><span class="line">    println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Swift风格的 for</span><br><span class="line">&#x2F;&#x2F; 遍历 0 ~ &lt;10</span><br><span class="line">for i in 0..&lt;10 &#123;</span><br><span class="line">    println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">println(&quot;---&quot;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 遍历 0 ~ 10</span><br><span class="line">for i in 0...10 &#123;</span><br><span class="line">    println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 特殊写法</span><br><span class="line">for _ in 0...10 &#123;</span><br><span class="line">    println(&quot;hello&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字符串获取长度"><a href="#字符串获取长度" class="headerlink" title="字符串获取长度"></a>字符串获取长度</h1><p>Swift3.2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let currentCharactorCount &#x3D; (textView.text?.characters.count)!</span><br></pre></td></tr></table></figure><p>Swift4.0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let currentCharactorCount &#x3D; textView.text!.count</span><br></pre></td></tr></table></figure><h1 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 映射到整型</span><br><span class="line">enum Movement: Int &#123;</span><br><span class="line">    case Left &#x3D; 0</span><br><span class="line">    case Right &#x3D; 1</span><br><span class="line">    case Top &#x3D; 2</span><br><span class="line">    case Bottom &#x3D; 3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.通知&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>命令行显示汉字</title>
    <link href="https://iodefog.github.io/2018/11/06/quotepath/"/>
    <id>https://iodefog.github.io/2018/11/06/quotepath/</id>
    <published>2018-11-06T01:45:40.921Z</published>
    <updated>2018-11-06T01:45:40.921Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.quotepath false</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>PHP学习</title>
    <link href="https://iodefog.github.io/2018/11/06/phplearn/"/>
    <id>https://iodefog.github.io/2018/11/06/phplearn/</id>
    <published>2018-11-06T01:45:40.920Z</published>
    <updated>2018-11-06T01:45:40.920Z</updated>
    
    <content type="html"><![CDATA[<p>PHP学习</p><h2 id="1-获取get和post方法中参数"><a href="#1-获取get和post方法中参数" class="headerlink" title="1. 获取get和post方法中参数"></a>1. 获取get和post方法中参数</h2><p>get方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$name&#x3D;_GET(&#39;name&#39;);</span><br><span class="line">echo $name;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>post方法都使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$name&#x3D;_POST(&#39;name&#39;);</span><br><span class="line">echo $name;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="2-返回json值"><a href="#2-返回json值" class="headerlink" title="2.返回json值"></a>2.返回json值</h2><p>数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$name&#x3D;$_POST[&quot;name&quot;];</span><br><span class="line">$age&#x3D;$_POST[&quot;age&quot;];</span><br><span class="line">$gender&#x3D;$_POST[&quot;gender&quot;];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 生成json字典</span><br><span class="line">$arrayName &#x3D; array(&quot;name&quot; &#x3D;&gt; $name,</span><br><span class="line">&quot;age&quot; &#x3D;&gt; $age,</span><br><span class="line">    &quot;gender&quot; &#x3D;&gt; $gender);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 生成json数组</span><br><span class="line">$arrayName2 &#x3D; array($arrayName,$arrayName,$arrayName);</span><br><span class="line">echo  json_encode($arrayName2);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>json_encode()只能转换UTF-8格式。否则就会为null。</p><p>转换编码</p><p>第一个参数，当前编码格式。<br>第二个参数，转换到的编码格式。<br>第三个参数，需要转换的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$newArray &#x3D; iconv(&#39;UTF-8&#39;,&quot;GBK&quot;,$array);</span><br></pre></td></tr></table></figure><h2 id="3-组装json"><a href="#3-组装json" class="headerlink" title="3.组装json"></a>3.组装json</h2><ol><li>定义Response类，json()方法 进行参数组装<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Response&#123;</span><br><span class="line">&#x2F;**</span><br><span class="line">* 这里注释</span><br><span class="line">*&#x2F;</span><br><span class="line">public static function json($code, $message&#x3D;&#39;&#39;, $data&#x3D;array())&#123;</span><br><span class="line">if(!is_numeric($code))&#123;</span><br><span class="line">return &#39;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">$result &#x3D; array(</span><br><span class="line">&#39;code&#39; &#x3D;&gt; $code,</span><br><span class="line">&#39;message&#39; &#x3D;&gt; $message,</span><br><span class="line">&#39;data&#39; &#x3D;&gt; $data</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">echo json_encode($result);</span><br><span class="line">exit;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>使用组装类的方法</li></ol><p>// 引用当前目录下的“response.php”文件<br>require_once(‘./response.php’);</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$name&#x3D;$_POST[&quot;name&quot;];</span><br><span class="line">$age&#x3D;$_POST[&quot;age&quot;];</span><br><span class="line">$gender&#x3D;$_POST[&quot;gender&quot;];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 引用当前目录下的“response.php”文件</span><br><span class="line">require_once(&#39;.&#x2F;response.php&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 生成json字典</span><br><span class="line">$arrayName &#x3D; array(&quot;name&quot; &#x3D;&gt; $name,</span><br><span class="line">&quot;age&quot; &#x3D;&gt; $age,</span><br><span class="line">    &quot;gender&quot; &#x3D;&gt; $gender);</span><br><span class="line">&#x2F;&#x2F; 生成json数组</span><br><span class="line">$response &#x3D; Response::json(&quot;200&quot;, &quot;成功&quot;,$arrayName);</span><br><span class="line">echo  json_encode($response);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;PHP学习&lt;/p&gt;
&lt;h2 id=&quot;1-获取get和post方法中参数&quot;&gt;&lt;a href=&quot;#1-获取get和post方法中参数&quot; class=&quot;headerlink&quot; title=&quot;1. 获取get和post方法中参数&quot;&gt;&lt;/a&gt;1. 获取get和post方法中参数&lt;/h
      
    
    </summary>
    
    
      <category term="技术,PHP" scheme="https://iodefog.github.io/categories/%E6%8A%80%E6%9C%AF-PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>Cocoapods 引用自定义Framework + Swift</title>
    <link href="https://iodefog.github.io/2018/11/06/pod_framework/"/>
    <id>https://iodefog.github.io/2018/11/06/pod_framework/</id>
    <published>2018-11-06T01:45:40.920Z</published>
    <updated>2018-11-06T01:45:40.920Z</updated>
    
    <content type="html"><![CDATA[<p>自定义Framew 一个模板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Pod::Spec.new do |s|</span><br><span class="line">  s.name         &#x3D; &quot;FMTest&quot;</span><br><span class="line">  s.version      &#x3D; &quot;0.0.1&quot;</span><br><span class="line">  s.summary      &#x3D; &quot;These will help people to find your library, and whilst ithhh&quot;</span><br><span class="line">  s.description  &#x3D; &lt;&lt;-DESC</span><br><span class="line">These will help people to find your library, and whilst itadfadfda</span><br><span class="line">                   DESC</span><br><span class="line">  s.homepage     &#x3D; &quot;http:&#x2F;&#x2F;git.d.sohu.com&#x2F;honglili&#x2F;videoframework&quot;</span><br><span class="line">  s.license      &#x3D; &quot;MIT&quot;</span><br><span class="line">  s.author             &#x3D; &#123; &quot;lihongli&quot; &#x3D;&gt; &quot;honglili@sohu-inc.com&quot; &#125;</span><br><span class="line">  s.platform     &#x3D; :ios, &quot;7.0&quot;</span><br><span class="line"></span><br><span class="line">  s.source       &#x3D; &#123; :git &#x3D;&gt; &quot;http:&#x2F;&#x2F;git.d.sohu.com&#x2F;honglili&#x2F;videoframework.git&quot;, :tag &#x3D;&gt; &quot;#&#123;s.version&#125;&quot; &#125;</span><br><span class="line"></span><br><span class="line">  # s.source_files  &#x3D; &quot;Class&#x2F;*.&#123;h,m&#125;&quot;</span><br><span class="line">  # s.exclude_files &#x3D; &quot;Classes&#x2F;Exclude&quot;</span><br><span class="line"></span><br><span class="line">  s.public_header_files &#x3D; &quot;FMTest&#x2F;headers&#x2F;*.&#123;h,m&#125;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  # s.resource  &#x3D; &quot;icon.png&quot;</span><br><span class="line">  # s.resources &#x3D; &quot;Resources&#x2F;*.png&quot;</span><br><span class="line">  s.resource &#x3D; &quot;FMTest.framework&#x2F;SohuVideoSDK.bundle&quot;</span><br><span class="line"></span><br><span class="line">  # s.framework  &#x3D; &quot;SomeFramework&quot;</span><br><span class="line">   # s.frameworks &#x3D; &quot;Foundation&quot;, &quot;UIKit&quot;</span><br><span class="line"> </span><br><span class="line">   s.vendored_frameworks &#x3D; &#39;FMTest.framework&#39;</span><br><span class="line"></span><br><span class="line">  # s.library   &#x3D; &quot;iconv&quot;</span><br><span class="line">  # s.libraries &#x3D; &quot;iconv&quot;, &quot;xml2&quot;</span><br><span class="line"></span><br><span class="line">  # s.requires_arc &#x3D; true</span><br><span class="line"></span><br><span class="line">  # s.xcconfig &#x3D; &#123; &quot;HEADER_SEARCH_PATHS&quot; &#x3D;&gt; &quot;$(SDKROOT)&#x2F;usr&#x2F;include&#x2F;libxml2&quot; &#125;</span><br><span class="line">  # s.dependency &quot;Masonry&quot;</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><p>创建 Swift Pod库 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Pod::Spec.new do |s|</span><br><span class="line"></span><br><span class="line">  s.name         &#x3D; &quot;SendSandBoxFileSwift&quot;</span><br><span class="line">  s.version      &#x3D; &quot;1.0&quot;</span><br><span class="line">  s.summary      &#x3D; &quot;Swift Use airDrop or Mail to transfer sandBox files, or view the file directly or play the video&quot;</span><br><span class="line"></span><br><span class="line">  s.description  &#x3D; &lt;&lt;-DESC</span><br><span class="line">  For Swift</span><br><span class="line"></span><br><span class="line">  let fileListVC &#x3D;  FileListTableViewController();</span><br><span class="line">self.navigationController?.pushViewController(fileListVC, animated: true);</span><br><span class="line">                   DESC</span><br><span class="line"></span><br><span class="line">  s.homepage     &#x3D; &quot;https:&#x2F;&#x2F;github.com&#x2F;iodefog&#x2F;SendSandBoxFileSwift&quot;</span><br><span class="line">  s.license      &#x3D; &quot;MIT&quot;</span><br><span class="line">  s.author             &#x3D; &#123; &quot;lihongli&quot; &#x3D;&gt; &quot;honglili@sohu-inc.com&quot; &#125;</span><br><span class="line">  s.platform     &#x3D; :ios, &quot;8.0&quot;</span><br><span class="line"></span><br><span class="line">  s.source       &#x3D; &#123; :git &#x3D;&gt; &quot;https:&#x2F;&#x2F;github.com&#x2F;iodefog&#x2F;SendSandBoxFileSwift.git&quot;, :tag &#x3D;&gt; &quot;#&#123;s.version&#125;&quot; &#125;</span><br><span class="line"></span><br><span class="line">  s.source_files  &#x3D; &quot;Classes&quot;, &quot;SendSandBoxFileSwift&#x2F;**&#x2F;*.swift&quot;</span><br><span class="line">  s.exclude_files &#x3D; &quot;Classes&#x2F;Exclude&quot;</span><br><span class="line"></span><br><span class="line">  s.frameworks &#x3D; &quot;MessageUI&quot;, &quot;UIKit&quot;, &quot;Foundation&quot;</span><br><span class="line">  s.pod_target_xcconfig &#x3D; &#123; &quot;SWIFT_VERSION&quot; &#x3D;&gt; &quot;3.2&quot; &#125;</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>如果报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$  pod lib lint --verbose </span><br><span class="line"></span><br><span class="line">Check dependencies</span><br><span class="line">The “Swift Language Version” (SWIFT_VERSION) build setting must be set to a supported value for targets which use Swift. This setting can be set in the build settings editor.</span><br><span class="line">The “Swift Language Version” (SWIFT_VERSION) build setting must be set to a supported value for targets which use Swift. This setting can be set in the build settings editor.</span><br><span class="line"></span><br><span class="line"> -&gt; SendSandBoxFileSwift (1.0)</span><br><span class="line">    - ERROR | [iOS] xcodebuild: Returned an unsuccessful exit code.</span><br></pre></td></tr></table></figure><p>需要加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.pod_target_xcconfig &#x3D; &#123; &quot;SWIFT_VERSION&quot; &#x3D;&gt; &quot;4.0&quot; &#125;</span><br><span class="line">echo &quot;4.0&quot; &gt; .swift-version</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自定义Framew 一个模板&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2
      
    
    </summary>
    
    
      <category term="iOS,技术" scheme="https://iodefog.github.io/categories/iOS-%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="framework, cocoapods" scheme="https://iodefog.github.io/tags/framework-cocoapods/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫下载‘凡人修仙传’有声小说</title>
    <link href="https://iodefog.github.io/2018/11/06/pythondownloadmp3/"/>
    <id>https://iodefog.github.io/2018/11/06/pythondownloadmp3/</id>
    <published>2018-11-06T01:45:40.920Z</published>
    <updated>2018-11-06T01:45:40.920Z</updated>
    
    <content type="html"><![CDATA[<ul><li>方法一：<br>使用 urllib.urlretrieve(）方法下载</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-  </span><br><span class="line">import urllib   </span><br><span class="line">import urllib2   </span><br><span class="line">#import request     </span><br><span class="line"># 下载地址前缀  </span><br><span class="line">url &#x3D; &#39;http:&#x2F;&#x2F;t.kanshulou.com&#x2F;玄幻&#x2F;凡人修仙传&#x2F;&#39;  </span><br><span class="line">mp3Count &#x3D; 0  </span><br><span class="line">while (mp3Count &lt; 1631):  </span><br><span class="line">mp3Count &#x3D; mp3Count + 1;  </span><br><span class="line">#    格式化字符串 即 3.mp3 -&gt; 003.mp3  </span><br><span class="line">downloadURL &#x3D; &quot;%s%03d.mp3&quot; % (url,mp3Count)  </span><br><span class="line">print &quot;%s&quot; % downloadURL  </span><br><span class="line">#    下载MP3代码  </span><br><span class="line">urllib.urlretrieve(&quot;%s&quot; % downloadURL, &quot;%03d.mp3&quot; % mp3Count)  </span><br><span class="line"></span><br><span class="line">print &quot;下载完成&quot;</span><br></pre></td></tr></table></figure><a id="more"></a><p><img src="/img/5DB7932B-8382-41BE-877B-0D420CBF63A9.png" alt="image"></p><ul><li>方法二：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python  </span><br><span class="line">#! -*- coding: utf-8 -*-  </span><br><span class="line">import urllib,urllib2,cookielib  </span><br><span class="line">import re  </span><br><span class="line">import os,time  </span><br><span class="line">import datetime  </span><br><span class="line"></span><br><span class="line">oldNow &#x3D; datetime.datetime.now()  </span><br><span class="line">print &quot;开始时间 %s&quot; % oldNow  </span><br><span class="line">urlp &#x3D; &#39;http:&#x2F;&#x2F;t.kanshulou.com&#x2F;玄幻&#x2F;凡人修仙传&#x2F;003.mp3&#39;  </span><br><span class="line"></span><br><span class="line">urlopen &#x3D; urllib.URLopener()  </span><br><span class="line">fp &#x3D; urlopen.open(urlp)  </span><br><span class="line">data &#x3D; fp.read()  </span><br><span class="line">#清除并以二进制写入  </span><br><span class="line">f &#x3D; open(&quot;003.mp3&quot;, &#39;w+b&#39;)  </span><br><span class="line">f.write(data)  </span><br><span class="line">f.close()  </span><br><span class="line"></span><br><span class="line">newNow &#x3D; datetime.datetime.now()  </span><br><span class="line"># .microseconds  </span><br><span class="line">print &quot;结束时间 %s&quot; % newNow  </span><br><span class="line"># 执行秒数  </span><br><span class="line">print &quot;耗时%ds&quot; % (newNow-oldNow).seconds  </span><br><span class="line"># 执行微秒数  </span><br><span class="line">print &quot;耗时%dms&quot; % (newNow-oldNow).microseconds</span><br></pre></td></tr></table></figure><p><img src="/img/6DAFBEC9-58AD-4862-86A6-503CA3C27E68.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;方法一：&lt;br&gt;使用 urllib.urlretrieve(）方法下载&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# -*- coding: utf-8 -*-  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import urllib   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import urllib2   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#import request     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 下载地址前缀  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;url &amp;#x3D; &amp;#39;http:&amp;#x2F;&amp;#x2F;t.kanshulou.com&amp;#x2F;玄幻&amp;#x2F;凡人修仙传&amp;#x2F;&amp;#39;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mp3Count &amp;#x3D; 0  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;while (mp3Count &amp;lt; 1631):  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mp3Count &amp;#x3D; mp3Count + 1;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#    格式化字符串 即 3.mp3 -&amp;gt; 003.mp3  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;downloadURL &amp;#x3D; &amp;quot;%s%03d.mp3&amp;quot; % (url,mp3Count)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print &amp;quot;%s&amp;quot; % downloadURL  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#    下载MP3代码  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;urllib.urlretrieve(&amp;quot;%s&amp;quot; % downloadURL, &amp;quot;%03d.mp3&amp;quot; % mp3Count)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print &amp;quot;下载完成&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>iOS开发中的一些技巧收集</title>
    <link href="https://iodefog.github.io/2018/11/06/jiqiao_animal/"/>
    <id>https://iodefog.github.io/2018/11/06/jiqiao_animal/</id>
    <published>2018-11-06T01:45:40.917Z</published>
    <updated>2018-11-06T01:45:40.917Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-cell-出现时加入动画"><a href="#1-cell-出现时加入动画" class="headerlink" title="1. cell 出现时加入动画"></a>1. cell 出现时加入动画</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-(void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath&#123;</span><br><span class="line"></span><br><span class="line">    cell.layer.transform &#x3D; CATransform3DMakeScale(0.1, 0.1, 1);</span><br><span class="line">    &#x2F;&#x2F;x和y的最终值为1</span><br><span class="line">    [UIView animateWithDuration:0.5 animations:^&#123;</span><br><span class="line">        cell.layer.transform &#x3D; CATransform3DMakeScale(1, 1, 1);</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/6ec8e8eba254dd2bcb6885212743dead.gif" alt="image"></p><h3 id="2-转场动画"><a href="#2-转场动画" class="headerlink" title="2.转场动画"></a>2.转场动画</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 选中某一行</span><br><span class="line">- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath &#123;</span><br><span class="line">    [tableView deselectRowAtIndexPath:indexPath animated:YES];&#x2F;&#x2F; 选中后取消选中的颜色</span><br><span class="line">    </span><br><span class="line">    showInfoViewController *VC &#x3D; [[showInfoViewController alloc]init];</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;插入动画</span><br><span class="line">    CGRect rectInTableView &#x3D; [tableView rectForRowAtIndexPath:indexPath];</span><br><span class="line">    CGRect sourceRect &#x3D; [tableView convertRect:rectInTableView toView:[tableView superview]];</span><br><span class="line">    UITableViewCell * selectedCell &#x3D; (UITableViewCell *)[self tableView:tableView cellForRowAtIndexPath:indexPath];</span><br><span class="line">    selectedCell.frame &#x3D; sourceRect;</span><br><span class="line">    selectedCell.backgroundColor &#x3D; [UIColor whiteColor];</span><br><span class="line">    [self.view addSubview:selectedCell];</span><br><span class="line">    [self bgView];</span><br><span class="line">    [self.view addSubview:_bgView];</span><br><span class="line">    [self.view bringSubviewToFront:selectedCell];</span><br><span class="line">    self.tempView &#x3D; [[UIView alloc] initWithFrame:selectedCell.frame];</span><br><span class="line">    self.tempView.backgroundColor &#x3D; [UIColor whiteColor];</span><br><span class="line">    self.tempView.alpha &#x3D; 0;</span><br><span class="line">    [self.view addSubview:self.tempView];</span><br><span class="line">    &#x2F;&#x2F; 进行动画</span><br><span class="line">    [UIView animateWithDuration:0.3 animations:^&#123;</span><br><span class="line">        selectedCell.transform &#x3D; CGAffineTransformMakeScale(1.0, 1.1);</span><br><span class="line">        self.tempView.alpha &#x3D; 1;</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    double delayInSeconds &#x3D; 0.3;</span><br><span class="line">    __block ViewController* bself &#x3D; self;</span><br><span class="line">    dispatch_time_t popTime &#x3D; dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));</span><br><span class="line">    dispatch_after(popTime, dispatch_get_main_queue(), ^(void)&#123;</span><br><span class="line">        [selectedCell removeFromSuperview];</span><br><span class="line">        &#x2F;&#x2F; 进行动画</span><br><span class="line">        [UIView animateWithDuration:0.3 animations:^&#123;</span><br><span class="line">            bself.tempView.transform &#x3D; CGAffineTransformMakeScale(1.0, SCREEN_HEIGHT &#x2F; bself.tempView.frame.size.height * 2);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    double delayInSeconds2 &#x3D; 0.6;</span><br><span class="line">    dispatch_time_t popTime2 &#x3D; dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds2 * NSEC_PER_SEC));</span><br><span class="line">    dispatch_after(popTime2, dispatch_get_main_queue(), ^(void)&#123;</span><br><span class="line">        &#x2F;&#x2F; 进行动画</span><br><span class="line">        [UIView animateWithDuration:0.3 animations:^&#123;</span><br><span class="line">            [bself.navigationController pushViewController:VC animated:NO];</span><br><span class="line">        &#125; completion:^(BOOL finished) &#123;</span><br><span class="line">            [bself.tempView removeFromSuperview];</span><br><span class="line">            [bself.bgView removeFromSuperview];</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 阴影视图</span><br><span class="line">- (UIView *)bgView &#123;</span><br><span class="line">    if (nil &#x3D;&#x3D; _bgView) &#123;</span><br><span class="line">        _bgView &#x3D; [[UIView alloc] initWithFrame:CGRectMake(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT)];</span><br><span class="line">        _bgView.backgroundColor &#x3D; [UIColor colorWithWhite:0 alpha:0.5];</span><br><span class="line">    &#125;</span><br><span class="line">    return _bgView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-(void)pushView&#123;</span><br><span class="line">    threeViewController *vc &#x3D; [[threeViewController alloc]init];</span><br><span class="line">    [self.navigationController pushViewController:vc animated:YES];</span><br><span class="line">    [UIView transitionWithView:self.navigationController.view duration:1 options:UIViewAnimationOptionTransitionFlipFromRight animations:nil completion:nil];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(void)popview&#123;</span><br><span class="line">    [self.navigationController popViewControllerAnimated:YES];</span><br><span class="line">    [UIView transitionWithView:self.navigationController.view duration:1 options:UIViewAnimationOptionTransitionFlipFromLeft animations:nil completion:nil];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-cell-出现时加入动画&quot;&gt;&lt;a href=&quot;#1-cell-出现时加入动画&quot; class=&quot;headerlink&quot; title=&quot;1. cell 出现时加入动画&quot;&gt;&lt;/a&gt;1. cell 出现时加入动画&lt;/h3&gt;&lt;figure class=&quot;highligh
      
    
    </summary>
    
    
      <category term="技术" scheme="https://iodefog.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="ios" scheme="https://iodefog.github.io/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>iOS模拟器命令行安装ipa知识点（只能是模拟器app才可以）</title>
    <link href="https://iodefog.github.io/2018/11/06/iphonesimulator/"/>
    <id>https://iodefog.github.io/2018/11/06/iphonesimulator/</id>
    <published>2018-11-06T01:45:40.916Z</published>
    <updated>2018-11-06T01:45:40.916Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查看支持的模拟器列表及UUID"><a href="#查看支持的模拟器列表及UUID" class="headerlink" title="查看支持的模拟器列表及UUID"></a>查看支持的模拟器列表及UUID</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcrun simctl list</span><br></pre></td></tr></table></figure><h2 id="启动运行模拟器："><a href="#启动运行模拟器：" class="headerlink" title="启动运行模拟器："></a>启动运行模拟器：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcrun instruments -w &#39;iPhone 6 Plus&#39;</span><br></pre></td></tr></table></figure><h2 id="在已经启动好的模拟器中安装应用："><a href="#在已经启动好的模拟器中安装应用：" class="headerlink" title="在已经启动好的模拟器中安装应用："></a>在已经启动好的模拟器中安装应用：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Usage: simctl install &lt;device&gt; &lt;path&gt;</span><br><span class="line"></span><br><span class="line">xcrun simctl install booted Calculator.app</span><br></pre></td></tr></table></figure><h2 id="启动已安装的应用，需要用到bundleid"><a href="#启动已安装的应用，需要用到bundleid" class="headerlink" title="启动已安装的应用，需要用到bundleid"></a>启动已安装的应用，需要用到bundleid</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xcrun simctl launch booted com.sincefox.zoucai.first</span><br><span class="line">com.sincefox.zoucai.first: 24517</span><br></pre></td></tr></table></figure><p>也可以传入一些启动参数xcrun simctl launch booted com.taobao.tmall -DumplingsPort 7001。对应的客户端应用获取参数逻辑是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[[[NSUserDefaults standardUserDefaults] dictionaryRepresentation] enumerateKeysAndObjectsUsingBlock:^(NSString * _Nonnull key, id  _Nonnull obj, BOOL * _Nonnull stop) &#123;</span><br><span class="line">            if([key isEqualToString:@&quot;DumplingsPort&quot;])&#123;</span><br><span class="line">                port &#x3D; obj;</span><br><span class="line">                *stop &#x3D; YES;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;查看支持的模拟器列表及UUID&quot;&gt;&lt;a href=&quot;#查看支持的模拟器列表及UUID&quot; class=&quot;headerlink&quot; title=&quot;查看支持的模拟器列表及UUID&quot;&gt;&lt;/a&gt;查看支持的模拟器列表及UUID&lt;/h2&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>iOS生成服务器所需证书pem或P12</title>
    <link href="https://iodefog.github.io/2018/11/06/iospush/"/>
    <id>https://iodefog.github.io/2018/11/06/iospush/</id>
    <published>2018-11-06T01:45:40.915Z</published>
    <updated>2018-11-06T01:45:40.915Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录制作服务器（例如php）利用pem推送服务</p><a id="more"></a><p>基本流程：</p><p>1.利用“钥匙串”请求证书</p><p>2.创建证书，下载cer文件</p><p>3.双击安装下载的cer文件后，导出p12证书</p><p>4.利用命令行转换pem文件</p><p>5.如果需要转换为p12</p><p>6.验证证书是否可用</p><p>具体步骤：</p><p>1.利用钥匙串请求证书</p><p><img src="/img/request_csr.png" alt="image"></p><p>Apple建议这样填写</p><p><img src="/img/9962780C-E852-497E-87C1-013CA3FCB461.png" alt="image"></p><p>保存，得到”CertificateSigningRequest.certSigningRequest”文件。这是请求所有证书的基础。</p><p>2.创建证书，下载cer文件</p><p>进入苹果开发者中心:<a href="https://developer.apple.com/cn/" target="_blank" rel="noopener">https://developer.apple.com/cn/</a> Certificates, IDs &amp; Profiles</p><p><img src="/img/B996E06D-EB2B-45F8-9DCA-37740CF79AED.png" alt="image"></p><p><img src="/img/3094613-6b5c3eae15e96f21.png" alt="image"></p><p>创建 “iOS Development” 和 “iOS Distribution” 以及“Identifiers-&gt;App IDs”证书后，才可以创建推送证书。</p><p>创建方法类似，此处省略800字。</p><p>把做的证书下载下来。</p><p><img src="/img/66851C9E-F106-4524-A11F-A193EF4A0833.png" alt="image"></p><p>分别得到发布开发cer和发布cer</p><p>“aps_development.cer” 和 “aps.cer”</p><p>3.双击安装下载的cer文件后，导出p12证书</p><p><img src="/img/12EFBBB0-FC0A-4D6E-8F9D-1D1BD7F2F9C2.png" alt="image"></p><p>分别导出开发证书和发布证书</p><p>“Apple Development IOS Push Services- com.in.inlan.p12” 和 “Apple Push Services- com.in.inlan.p12”</p><p>4.利用命令行转换pem文件</p><p>1). 先把下载下的cer转换为pem</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ openssl x509 -inform der -in aps_development.cer -out devPushChatCert.pem</span><br><span class="line"></span><br><span class="line">$ openssl x509 -inform der -in aps.cer -out PushChatCert.pem</span><br></pre></td></tr></table></figure><p>2). 将钥匙串中的p12转换成pem</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$  openssl pkcs12 -nocerts -out devPushChatKey.pem -in Apple\ Development\ IOS\ Push\ Services-\ com.in.inlan.p12</span><br><span class="line"></span><br><span class="line">$ openssl pkcs12 -nocerts -out PushChatKey.pem -in Apple\ Push\ Services-\ com.in.inlan.p12</span><br></pre></td></tr></table></figure><p>3). 将上面生成的2中pem转为一个pem</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat devPushChatCert.pem devPushChatKey.pem &gt; dev_ck.pem</span><br><span class="line"></span><br><span class="line">$ cat PushChatCert.pem PushChatKey.pem &gt; ck.pem</span><br></pre></td></tr></table></figure><p>5.如果需要转换为p12</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ openssl pkcs12 -export -in dev_ck.pem -out dev_pushcer.p12</span><br><span class="line"></span><br><span class="line">$ openssl pkcs12 -export -in ck.pem -out pushcer.p12</span><br></pre></td></tr></table></figure><p>6.验证证书是否可用</p><p>整理有个写好的脚本可用（内部替换所需deviceToken即可）</p><p><a href="/file/push.zip">push demo</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php ios-push.php</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录制作服务器（例如php）利用pem推送服务&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://iodefog.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="iOS , Object-C" scheme="https://iodefog.github.io/tags/iOS-Object-C/"/>
    
  </entry>
  
  <entry>
    <title>iOS 贝赛尔曲线(BezierPath)常用方法研究</title>
    <link href="https://iodefog.github.io/2018/11/06/iosbezierpath/"/>
    <id>https://iodefog.github.io/2018/11/06/iosbezierpath/</id>
    <published>2018-11-06T01:45:40.913Z</published>
    <updated>2018-11-06T01:45:40.913Z</updated>
    
    <content type="html"><![CDATA[<p>UIBezierPath这个类在UIKit中， 是Core Graphics框架关于path的一个封装，使用此类可以定义简单的形状，比如我们常用到，矩形，圆形，椭圆，弧，或者不规则的多边形</p><hr><a id="more"></a><ul><li><a href="#">目录</a><br>  <a href="#贝塞尔曲线可以做到哪些？">贝塞尔曲线可以做到哪些？</a><br>  <a href="#贝塞尔曲线是怎么画出来的？">贝塞尔曲线是怎么画出来的？</a><br>  <a href="#常用设置介绍说明">常用设置介绍说明</a><br>  <a href="#画图形">画图形</a><br>  <a href="#BezierPath动画">BezierPath动画</a><br>  <a href="#了解一下底层的CoreGraphics">了解一下底层的CoreGraphics</a><br>  <a href="#通过shapeLayer画线">通过shapeLayer画线</a></li></ul><h1 id="贝塞尔曲线可以做到哪些？"><a href="#贝塞尔曲线可以做到哪些？" class="headerlink" title="贝塞尔曲线可以做到哪些？"></a>贝塞尔曲线可以做到哪些？</h1><p>1.画图形<br>2.做动画</p><h1 id="贝塞尔曲线是怎么画出来的？"><a href="#贝塞尔曲线是怎么画出来的？" class="headerlink" title="贝塞尔曲线是怎么画出来的？"></a>贝塞尔曲线是怎么画出来的？</h1><p>首先，我们在平面内选3个不同线的点并且依次用线段连接。如下所示..</p><p><img src="/img/56030-48977fcfcd8cd57e.png" alt="image"></p><p>接着，我们在AB和BC线段上找出点D和点E，使得AD/AB = BE/BC。</p><p><img src="/img/56030-5d3e252f34e657c9.jpg" alt="image"></p><p>再接着，连接DE，并在DE上找出一点F，使得DF/DE = AD/AB = BE/BC。</p><p><img src="/img/56030-5175f6c03d4990b2.jpg" alt="image"></p><p>然后，根据我们高中所学的极限的知识，让选取的点D在第一条线段上从起点A，移动到终点B，找出所有点F，并将它们连起来。最后你会发现，你得到了一条非常光滑的曲线，这条就是传说中的，贝塞尔曲线。</p><p>这是二阶贝塞尔曲线。</p><p><img src="/img/56030-bb6b8c6a46f12135.gif" alt="image"></p><p>下面是三阶四阶和五阶。</p><p><img src="/img/56030-f3e69b487f4e37c8.gif" alt="image"></p><p><img src="/img/56030-2d2fb8989e10f177.gif" alt="image"></p><p><img src="/img/56030-390b7b874ddd5d3d.gif" alt="image"></p><p>最后看一下一阶</p><p><img src="/img/56030-b65e3dd8196f4da5.gif" alt="image"></p><p>所以贝塞尔曲线的厉害之处就在这里，从1-n阶的连续函数，他都可以计算得到一条光滑曲线。</p><p>提供一个比较牛x的在线查看贝塞尔曲线网址</p><p>Animated Bézier Curves<br><a href="https://www.jasondavies.com/animated-bezier/" target="_blank" rel="noopener">https://www.jasondavies.com/animated-bezier/</a></p><h1 id="常用设置介绍说明"><a href="#常用设置介绍说明" class="headerlink" title="常用设置介绍说明"></a>常用设置介绍说明</h1><p>1、[color set];设置线条颜色，也就是相当于画笔颜色</p><p>2、path.lineWidth = 5.0;这个很好理解了，就是划线的宽度</p><p>3、path.lineCapStyle这个线段起点是终点的样式，这个样式有三种：</p><ul><li>1、kCGLineCapButt该属性值指定不绘制端点， 线条结尾处直接结束。这是默认值。</li><li>2、kCGLineCapRound 该属性值指定绘制圆形端点， 线条结尾处绘制一个直径为线条宽度的半圆。</li><li>3、kCGLineCapSquare 该属性值指定绘制方形端点。 线条结尾处绘制半个边长为线条宽度的正方形。需要说明的是，这种形状的端点与“butt”形状的端点十分相似，只是采用这种形式的端点的线条略长一点而已</li></ul><p>4、path.lineJoinStyle这个属性是用来设置两条线连结点的样式，同样它也有三种样式供我们选择</p><ul><li>1、kCGLineJoinMiter 斜接</li><li>2、kCGLineJoinRound 圆滑衔接</li><li>3、kCGLineJoinBevel 斜角连接</li></ul><p>5、[path stroke];用 stroke 得到的是不被填充的 view ，[path fill]; 用 fill 得到的内部被填充的 view，这点在下面的代码还有绘制得到的图片中有，可以体会一下这两者的不同。</p><h1 id="画图形"><a href="#画图形" class="headerlink" title="画图形"></a>画图形</h1><h3 id="画线"><a href="#画线" class="headerlink" title="画线"></a>画线</h3><p><img src="/img/WX20171212-152501.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 画线</span><br><span class="line">- (void)createTest0&#123;</span><br><span class="line">    UIColor *color &#x3D; [UIColor redColor];</span><br><span class="line">    [color set]; &#x2F;&#x2F;设置线条颜色</span><br><span class="line">    </span><br><span class="line">    UIBezierPath *path &#x3D; [UIBezierPath bezierPath];</span><br><span class="line">    [path moveToPoint:CGPointMake(10, 100)];</span><br><span class="line">    [path addLineToPoint:CGPointMake(200, 250)];</span><br><span class="line">    </span><br><span class="line">    [path addLineToPoint:CGPointMake(100, 350)];</span><br><span class="line">    path.lineWidth &#x3D; 4;</span><br><span class="line">    path.lineCapStyle &#x3D; kCGLineCapRound ;&#x2F;&#x2F;kCGLineCapRound; &#x2F;&#x2F;线条拐角</span><br><span class="line">    path.lineJoinStyle &#x3D; kCGLineCapRound;  &#x2F;&#x2F;终点处理</span><br><span class="line">    </span><br><span class="line">    [path stroke];</span><br><span class="line">&#x2F;&#x2F;    [path fill];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五边形"><a href="#五边形" class="headerlink" title="五边形"></a>五边形</h3><p><img src="/img/WX20171212-152805.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 五边形</span><br><span class="line">- (void)createTest1&#123;</span><br><span class="line">    UIColor *color &#x3D; [UIColor redColor];</span><br><span class="line">    [color set]; &#x2F;&#x2F;设置线条颜色</span><br><span class="line"></span><br><span class="line">    UIBezierPath *path &#x3D; [UIBezierPath bezierPath];</span><br><span class="line">    path.lineWidth &#x3D; 5;</span><br><span class="line">    </span><br><span class="line">    path.lineJoinStyle &#x3D; kCGLineJoinRound;</span><br><span class="line">    path.lineCapStyle &#x3D; kCGLineCapRound;</span><br><span class="line">    </span><br><span class="line">    [path moveToPoint:CGPointMake(200, 50)];</span><br><span class="line">    </span><br><span class="line">    [path addLineToPoint:CGPointMake(300, 100)];</span><br><span class="line">    [path addLineToPoint:CGPointMake(260, 200)];</span><br><span class="line">    [path addLineToPoint:CGPointMake(100, 200)];</span><br><span class="line">    [path addLineToPoint:CGPointMake(100, 70)];</span><br><span class="line">    </span><br><span class="line">    [path closePath];</span><br><span class="line">    </span><br><span class="line">    [path stroke];</span><br><span class="line">&#x2F;&#x2F;    [path fill];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="正方形或者矩形"><a href="#正方形或者矩形" class="headerlink" title="正方形或者矩形"></a>正方形或者矩形</h3><p><img src="/img/WX20171212-152956.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 正方形或者矩形</span><br><span class="line">- (void)createTest2&#123;</span><br><span class="line">    UIColor *color &#x3D; [UIColor redColor];</span><br><span class="line">    [color set]; &#x2F;&#x2F;设置线条颜色</span><br><span class="line"></span><br><span class="line">    UIBezierPath *path &#x3D; [UIBezierPath bezierPathWithRect:CGRectMake(20, 20, 200, 200)];</span><br><span class="line">    path.lineWidth &#x3D; 5;</span><br><span class="line">    path.lineJoinStyle &#x3D; kCGLineJoinRound;</span><br><span class="line">    path.lineCapStyle &#x3D; kCGLineCapRound;</span><br><span class="line">    </span><br><span class="line">    [path stroke];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="椭圆或者圆"><a href="#椭圆或者圆" class="headerlink" title="椭圆或者圆"></a>椭圆或者圆</h3><p><img src="/img/WX20171212-153438.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 椭圆或者圆</span><br><span class="line">- (void)createTest3&#123;</span><br><span class="line">    UIColor *color &#x3D; [UIColor redColor];</span><br><span class="line">    [color set]; &#x2F;&#x2F;设置线条颜色</span><br><span class="line"></span><br><span class="line">    UIBezierPath *path &#x3D; [UIBezierPath bezierPathWithOvalInRect:CGRectMake(20, 40, 300, 200)];</span><br><span class="line">    path.lineWidth &#x3D; 5;</span><br><span class="line">    path.lineJoinStyle &#x3D; kCGLineJoinRound;</span><br><span class="line">    path.lineCapStyle &#x3D; kCGLineCapRound;</span><br><span class="line">    [path stroke];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="矩形四角圆角"><a href="#矩形四角圆角" class="headerlink" title="矩形四角圆角"></a>矩形四角圆角</h3><p><img src="/img/WX20171212-153537.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 矩形四角圆角</span><br><span class="line">- (void)createTest4&#123;</span><br><span class="line">    UIColor *color &#x3D; [UIColor redColor];</span><br><span class="line">    [color set];</span><br><span class="line">    </span><br><span class="line">    UIBezierPath *path &#x3D; [UIBezierPath bezierPathWithRoundedRect:CGRectMake(20, 20, 200, 200) cornerRadius:50];</span><br><span class="line">    [path fill];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四个角里右上和左下圆角"><a href="#四个角里右上和左下圆角" class="headerlink" title="四个角里右上和左下圆角"></a>四个角里右上和左下圆角</h3><p><img src="/img/WX20171212-153737.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 四个角里右上和左下圆角</span><br><span class="line">- (void)createTest5&#123;</span><br><span class="line">    UIColor *color &#x3D; [UIColor redColor];</span><br><span class="line">    [color set];</span><br><span class="line">    UIBezierPath *path &#x3D; [UIBezierPath bezierPathWithRoundedRect:CGRectMake(20, 20, 200, 200) byRoundingCorners:UIRectCornerTopRight|UIRectCornerBottomLeft cornerRadii:CGSizeMake(50, 50)];</span><br><span class="line">    </span><br><span class="line">    [path fill];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="顺时针或者逆时针画线"><a href="#顺时针或者逆时针画线" class="headerlink" title="顺时针或者逆时针画线"></a>顺时针或者逆时针画线</h3><p><img src="/img/WX20171212-153917.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 顺时针或者逆时针画线</span><br><span class="line">- (void)createTest6&#123;</span><br><span class="line">    UIColor *color &#x3D; [UIColor redColor];</span><br><span class="line">    [color set];</span><br><span class="line"></span><br><span class="line">    UIBezierPath *path &#x3D; [UIBezierPath bezierPathWithArcCenter:CGPointMake(200, 200) radius:50 startAngle:M_PI_2 endAngle:M_PI*2 clockwise:YES];</span><br><span class="line">    path.lineWidth &#x3D; 10;</span><br><span class="line"></span><br><span class="line">    [path stroke];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="绘制二次贝塞尔曲线"><a href="#绘制二次贝塞尔曲线" class="headerlink" title="绘制二次贝塞尔曲线"></a>绘制二次贝塞尔曲线</h3><p><img src="/img/WX20171212-154002.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 绘制二次贝塞尔曲线</span><br><span class="line">- (void)createTest7&#123;</span><br><span class="line">    UIColor *color &#x3D; [UIColor redColor];</span><br><span class="line">    [color set];</span><br><span class="line"></span><br><span class="line">    UIBezierPath *path &#x3D; [UIBezierPath bezierPath];</span><br><span class="line">    </span><br><span class="line">    path.lineWidth &#x3D; 5;</span><br><span class="line">    </span><br><span class="line">    [path moveToPoint:CGPointMake(20, 200)];</span><br><span class="line">    </span><br><span class="line">    [path addQuadCurveToPoint:CGPointMake(20+40*1, 200) controlPoint:CGPointMake(40*1, 0)];</span><br><span class="line">    </span><br><span class="line">    [path addQuadCurveToPoint:CGPointMake(20+40*2, 200) controlPoint:CGPointMake(40*2, 0)];</span><br><span class="line"></span><br><span class="line">    [path addQuadCurveToPoint:CGPointMake(20+40*3, 200) controlPoint:CGPointMake(40*3, 0)];</span><br><span class="line"></span><br><span class="line">    [path addQuadCurveToPoint:CGPointMake(20+40*4, 200) controlPoint:CGPointMake(40*4, 0)];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;    [path addQuadCurveToPoint:CGPointMake(200, 200) controlPoint:CGPointMake(180*3&#x2F;2., 180*1&#x2F;5.)];</span><br><span class="line">    </span><br><span class="line">&#x2F;&#x2F;    [path stroke];</span><br><span class="line">    [path fill];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="绘制三次贝塞尔曲线"><a href="#绘制三次贝塞尔曲线" class="headerlink" title="绘制三次贝塞尔曲线"></a>绘制三次贝塞尔曲线</h3><p><img src="/img/WX20171212-154104.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;绘制三次贝塞尔曲线</span><br><span class="line">- (void)createTest8&#123;</span><br><span class="line">    UIColor *color &#x3D; [UIColor redColor];</span><br><span class="line">    [color set];</span><br><span class="line">    </span><br><span class="line">    UIBezierPath *path &#x3D; [UIBezierPath bezierPath];</span><br><span class="line">    </span><br><span class="line">    path.lineWidth &#x3D; 5;</span><br><span class="line"></span><br><span class="line">    [path moveToPoint:CGPointMake(20, 200)];</span><br><span class="line">    [path addCurveToPoint:CGPointMake(130, 200) controlPoint1:CGPointMake(75, 0) controlPoint2:CGPointMake(75, 400)];</span><br><span class="line">    [path addCurveToPoint:CGPointMake(260, 200) controlPoint1:CGPointMake(195, 0) controlPoint2:CGPointMake(195, 400)];</span><br><span class="line"></span><br><span class="line">    [path fill];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="BezierPath动画"><a href="#BezierPath动画" class="headerlink" title="BezierPath动画"></a>BezierPath动画</h1><p><img src="/img/bezierpathAnimation.gif" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> &#x2F;*</span><br><span class="line">     这个属性用以指定时间函数，类似于运动的加速度</span><br><span class="line">     kCAMediaTimingFunctionLinear&#x2F;&#x2F;线性</span><br><span class="line">     kCAMediaTimingFunctionEaseIn&#x2F;&#x2F;淡入</span><br><span class="line">     kCAMediaTimingFunctionEaseOut&#x2F;&#x2F;淡出</span><br><span class="line">     kCAMediaTimingFunctionEaseInEaseOut&#x2F;&#x2F;淡入淡出</span><br><span class="line">     kCAMediaTimingFunctionDefault&#x2F;&#x2F;默认</span><br><span class="line"></span><br><span class="line">    kCAFillModeForwards</span><br><span class="line">    fillMode的作用就是决定当前对象过了非active时间段的行为. 比如动画开始之前,动画结束之后。如果是一个动画CAAnimation,则需要将其removedOnCompletion设置为NO,要不然fillMode不起作用.</span><br><span class="line">     </span><br><span class="line">     下面来讲各个fillMode的意义</span><br><span class="line">     kCAFillModeRemoved 这个是默认值,也就是说当动画开始前和动画结束后,动画对layer都没有影响,动画结束后,layer会恢复到之前的状态</span><br><span class="line">     kCAFillModeForwards 当动画结束后,layer会一直保持着动画最后的状态</span><br><span class="line">     kCAFillModeBackwards 这个和kCAFillModeForwards是相对的,就是在动画开始前,你只要将动画加入了一个layer,layer便立即进入动画的初始状态并等待动画开始.你可以这样设定测试代码,将一个动画加入一个layer的时候延迟5秒执行.然后就会发现在动画没有开始的时候,只要动画被加入了layer,layer便处于动画初始状态</span><br><span class="line">     kCAFillModeBoth 理解了上面两个,这个就很好理解了,这个其实就是上面两个的合成.动画加入后开始之前,layer便处于动画初始状态,动画结束后layer保持动画最后的状态.</span><br><span class="line"></span><br><span class="line">     kCAAnimationPaced</span><br><span class="line">     在关键帧动画中还有一个非常重要的参数,那便是calculationMode,计算模式.该属性决定了物体在每个子路径下是跳着走还是匀速走，跟timeFunctions属性有点类似</span><br><span class="line">     其主要针对的是每一帧的内容为一个座标点的情况,也就是对anchorPoint 和 position 进行的动画.当在平面座标系中有多个离散的点的时候,可以是离散的,也可以直线相连后进行插值计算,也可以使用圆滑的曲线将他们相连后进行插值计算. calculationMode目前提供如下几种模式</span><br><span class="line">     </span><br><span class="line">     kCAAnimationLinear calculationMode的默认值,表示当关键帧为座标点的时候,关键帧之间直接直线相连进行插值计算;</span><br><span class="line">     kCAAnimationDiscrete 离散的,就是不进行插值计算,所有关键帧直接逐个进行显示;</span><br><span class="line">     kCAAnimationPaced 使得动画均匀进行,而不是按keyTimes设置的或者按关键帧平分时间,此时keyTimes和timingFunctions无效;</span><br><span class="line">     kCAAnimationCubic 对关键帧为座标点的关键帧进行圆滑曲线相连后插值计算,对于曲线的形状还可以通过tensionValues,continuityValues,biasValues来进行调整自定义,这里的数学原理是Kochanek–Bartels spline,这里的主要目的是使得运行的轨迹变得圆滑;</span><br><span class="line">     kCAAnimationCubicPaced 看这个名字就知道和kCAAnimationCubic有一定联系,其实就是在kCAAnimationCubic的基础上使得动画运行变得均匀,就是系统时间内运动的距离相同,此时keyTimes以及timingFunctions也是无效的.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     *&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 贝塞尔曲线动画</span><br><span class="line">- (void)createTest12&#123;</span><br><span class="line">    </span><br><span class="line">    UIBezierPath *path &#x3D; [UIBezierPath bezierPath];</span><br><span class="line">    [path moveToPoint:CGPointMake(100, 200)];</span><br><span class="line">    [path addCurveToPoint:CGPointMake(400, 200) controlPoint1:CGPointMake(200, 0) controlPoint2:CGPointMake(300, 400)];</span><br><span class="line">    </span><br><span class="line">    CAKeyframeAnimation *keyFA &#x3D; [CAKeyframeAnimation animationWithKeyPath:@&quot;position&quot;];</span><br><span class="line">    keyFA.duration &#x3D; 8;</span><br><span class="line">    keyFA.repeatCount &#x3D; 10;</span><br><span class="line">    keyFA.timingFunction &#x3D; [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionLinear];</span><br><span class="line">    keyFA.path &#x3D; path.CGPath;</span><br><span class="line">    keyFA.calculationMode &#x3D; kCAAnimationPaced;</span><br><span class="line">    &#x2F;&#x2F;旋转的模式,auto就是沿着切线方向动，autoReverse就是转180度沿着切线动</span><br><span class="line">    keyFA.rotationMode &#x3D; kCAAnimationRotateAuto;</span><br><span class="line">    &#x2F;&#x2F;结束后是否移除动画</span><br><span class="line">    keyFA.removedOnCompletion &#x3D; NO;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;添加动画</span><br><span class="line">    [self.redView.layer addAnimation:keyFA forKey:@&quot;&quot;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)drawRect:(CGRect)rect&#123;</span><br><span class="line">    [super drawRect:rect];</span><br><span class="line">    </span><br><span class="line">    UIColor *color &#x3D; [UIColor redColor];</span><br><span class="line">    [color set];</span><br><span class="line">    </span><br><span class="line">    UIBezierPath *path &#x3D; [UIBezierPath bezierPath];</span><br><span class="line">    [path moveToPoint:CGPointMake(100, 200)];</span><br><span class="line">    path.lineWidth &#x3D; 3;</span><br><span class="line">    path.lineJoinStyle &#x3D; kCGLineJoinRound;</span><br><span class="line">    path.lineCapStyle &#x3D; kCGLineCapRound;</span><br><span class="line">    [path addCurveToPoint:CGPointMake(400, 200) controlPoint1:CGPointMake(200, 0) controlPoint2:CGPointMake(300, 400)];</span><br><span class="line">    [path stroke];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="了解一下底层的CoreGraphics"><a href="#了解一下底层的CoreGraphics" class="headerlink" title="了解一下底层的CoreGraphics"></a>了解一下底层的CoreGraphics</h1><p>简单易懂的介绍博客</p><p><a href="http://www.mamicode.com/info-detail-841887.html" target="_blank" rel="noopener">http://www.mamicode.com/info-detail-841887.html</a></p><p>下面介绍了怎样给BezierPath赋值CGPath，我看有点用，直接把代码拿来了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-(void)drawRect:(CGRect)rect  </span><br><span class="line">&#123;  </span><br><span class="line">    &#x2F;&#x2F; Create the path data  </span><br><span class="line">    &#x2F;&#x2F;创建路径时间  </span><br><span class="line">    CGMutablePathRef cgPath &#x3D; CGPathCreateMutable();  </span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;cgPath的画图接口  </span><br><span class="line">    &#x2F;&#x2F;给一个cgPath里面添加了多个样式，圆和椭圆会发生关联  </span><br><span class="line">      </span><br><span class="line">    &#x2F;&#x2F;两个椭圆互不影响  </span><br><span class="line">    CGPathAddEllipseInRect(cgPath, NULL, CGRectMake(100, 100, 50, 100));  </span><br><span class="line">      </span><br><span class="line">    CGPathAddEllipseInRect(cgPath, NULL, CGRectMake(250, 250, 100, 50));  </span><br><span class="line">      </span><br><span class="line">    &#x2F;&#x2F;矩形  </span><br><span class="line">    CGPathAddRect(cgPath, NULL, CGRectMake(200, 500, 30, 100));        </span><br><span class="line">&#x2F;&#x2F;    圆形  </span><br><span class="line">&#x2F;&#x2F;    CGPathAddArc(cgPath, NULL, 120, 400, 100, 0, M_PI*2, YES);  </span><br><span class="line">      </span><br><span class="line">    &#x2F;&#x2F;下面两句要搭配，先有起点  </span><br><span class="line">    CGPathMoveToPoint(cgPath, NULL, 200, 300);  </span><br><span class="line">    &#x2F;&#x2F;加一段弧  </span><br><span class="line">    CGPathAddArcToPoint(cgPath, NULL, 320, 250, DEGREES_TO_RADIANS(150), M_PI*2, 50);  </span><br><span class="line">  </span><br><span class="line">              </span><br><span class="line">    &#x2F;&#x2F;把CGPath赋给贝塞尔曲线  </span><br><span class="line">    UIBezierPath* aPath &#x3D; [UIBezierPath bezierPath];  </span><br><span class="line">      </span><br><span class="line">    aPath.CGPath &#x3D; cgPath;  </span><br><span class="line">      </span><br><span class="line">    aPath.usesEvenOddFillRule &#x3D; YES;  </span><br><span class="line">      </span><br><span class="line">   &#x2F;&#x2F;并不在ARC的管理范围之内。所以需要手动释放对象，释放cgPath  </span><br><span class="line">    CGPathRelease(cgPath);  </span><br><span class="line">      </span><br><span class="line">    &#x2F;&#x2F;划线  </span><br><span class="line">    [[UIColor redColor]setStroke];  </span><br><span class="line">    [aPath setLineWidth:5];  </span><br><span class="line">    [aPath stroke];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="通过shapeLayer画线"><a href="#通过shapeLayer画线" class="headerlink" title="通过shapeLayer画线"></a>通过shapeLayer画线</h1><p>这样就不用去UIView的drawRect方法里面画图了,用法“给CAShapeLayer赋值 CGPath”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;ShapeLayer  </span><br><span class="line">-(void)createTest10 </span><br><span class="line">&#123;  </span><br><span class="line">    &#x2F;&#x2F;贝塞尔画圆  </span><br><span class="line">    UIBezierPath *path &#x3D; [UIBezierPath bezierPathWithArcCenter:CGPointMake(100, 100) radius:100 startAngle:0 endAngle:M_PI clockwise:NO];  </span><br><span class="line">      </span><br><span class="line">    &#x2F;&#x2F;初始化shapeLayer  </span><br><span class="line">    self.myShapeLayer &#x3D; [CAShapeLayer layer];  </span><br><span class="line">    _myShapeLayer.frame &#x3D; _redView.bounds;  </span><br><span class="line">  </span><br><span class="line">    _myShapeLayer.strokeColor &#x3D; [UIColor greenColor].CGColor;&#x2F;&#x2F;边沿线色   </span><br><span class="line">    _myShapeLayer.fillColor &#x3D; [UIColor grayColor].CGColor;&#x2F;&#x2F;填充色  </span><br><span class="line">      </span><br><span class="line">    _myShapeLayer.lineJoin &#x3D; kCALineJoinMiter;&#x2F;&#x2F;线拐点的类型  </span><br><span class="line">    _myShapeLayer.lineCap &#x3D; kCALineCapSquare;&#x2F;&#x2F;线终点  </span><br><span class="line">            </span><br><span class="line">    &#x2F;&#x2F;从贝塞尔曲线获得形状  </span><br><span class="line">    _myShapeLayer.path &#x3D; path.CGPath;  </span><br><span class="line">      </span><br><span class="line">    &#x2F;&#x2F;线条宽度  </span><br><span class="line">    _myShapeLayer.lineWidth &#x3D; 10;  </span><br><span class="line">      </span><br><span class="line">    &#x2F;&#x2F;起始和终止  </span><br><span class="line">    _myShapeLayer.strokeStart &#x3D; 0.0;  </span><br><span class="line">    _myShapeLayer.strokeEnd &#x3D; 1.0;  </span><br><span class="line">            </span><br><span class="line">    &#x2F;&#x2F;将layer添加进图层  </span><br><span class="line">    [self.redView.layer addSublayer:_myShapeLayer];          </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是我调试时的demo：<a href="https://github.com/iOdeFog/BezierPathDemo" target="_blank" rel="noopener">https://github.com/iOdeFog/BezierPathDemo</a></p><p>参考:<br><a href="http://cdn2.jianshu.io/p/c883fbf52681" target="_blank" rel="noopener">http://cdn2.jianshu.io/p/c883fbf52681</a><br><a href="http://www.jianshu.com/p/5dbdd1ee47aa" target="_blank" rel="noopener">http://www.jianshu.com/p/5dbdd1ee47aa</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;UIBezierPath这个类在UIKit中， 是Core Graphics框架关于path的一个封装，使用此类可以定义简单的形状，比如我们常用到，矩形，圆形，椭圆，弧，或者不规则的多边形&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="object-c" scheme="https://iodefog.github.io/categories/object-c/"/>
    
    
      <category term="iOS, 贝塞尔曲线, BezierPath" scheme="https://iodefog.github.io/tags/iOS-%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF-BezierPath/"/>
    
  </entry>
  
  <entry>
    <title>手把手利用Google cloud platform 建立VPS</title>
    <link href="https://iodefog.github.io/2018/11/06/googlevps/"/>
    <id>https://iodefog.github.io/2018/11/06/googlevps/</id>
    <published>2018-11-06T01:45:40.911Z</published>
    <updated>2018-11-06T01:45:40.911Z</updated>
    
    <content type="html"><![CDATA[<p>手把手利用Google cloud platform 建立VPS</p><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><ol><li>一张VISA信用卡</li><li>Google 账户</li><li>由于 Google 在中国是不存在的，所以 要有代理</li><li>下载<a href="/file/ShadowsocksX.zip">ShadowsocksX</a></li></ol><p>300刀一年的有效期，使用最低配的话，可以玩一年，每个月有86G的流量，个人使用足够了吧……</p><h2 id="2-开始申请"><a href="#2-开始申请" class="headerlink" title="2.开始申请"></a>2.开始申请</h2><p>选择国家</p><p>很多人说不能选中国，后面会无法通过，不过我用的就是中国的，已经通过了。如果觉得不保险，可以用虚拟的美国身份 </p><p>随机生成美国身份<a href="http://www.haoweichi.com/Index/random" target="_blank" rel="noopener">http://www.haoweichi.com/Index/random</a></p><p>填写注册信息和信用卡<br>根绝你的身份和信用卡账单地址如实填写就好了，如实也包括上面的美国身份。</p><p>信用卡会扣除1美元，过一会就会返还。</p><h2 id="3-设定防火墙"><a href="#3-设定防火墙" class="headerlink" title="3.设定防火墙"></a>3.设定防火墙</h2><ul><li><p>从选单中找到网路- VPC网路- 防火墙规则<br><img src="https://upload-images.jianshu.io/upload_images/2968083-b34d227bf49e10cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/653" alt="image"></p></li><li><p>选择建立防火墙规则<br><img src="https://wx3.sinaimg.cn/mw690/699c2d0fly1fesgxm2qxpj20ml0mymyg.jpg" alt="image"></p></li><li><p>选择目标</p></li><li><p>ip范围输入 0.0.0.0/0</p></li><li><p>建立完毕可以看到刚刚建立的规则</p></li></ul><h2 id="3-申请静态IP"><a href="#3-申请静态IP" class="headerlink" title="3.申请静态IP"></a>3.申请静态IP</h2><p>这个步骤可有可无。具体区别请看以下描述。</p><ul><li>静态IP地址 被分配到一个项目长期直到它们被明确地释放，并且保持附着到一个实例，即使当实例停止，直到它们被明确地分离。</li><li>临时IP地址 分配给一个实例只有等到它重新启动或终止。 如果一个实例被终止或停止时，分配给该实例的任何临时的外部IP地址被释放回通用计算引擎IP地址池，成为可以使用的其他项目。 当停止实例再次启动，一个新的临时外部IP地址被分配给该实例。<br>直接访问 ： <a href="https://console.cloud.google.com/networking/addresses/list" target="_blank" rel="noopener">https://console.cloud.google.com/networking/addresses/list</a></li></ul><p>或者在菜单中依次点击 【网络】–&gt;  【外部IP地址】 –&gt; 【保留静态IP】</p><p>区域可选亚洲东部、欧洲、美国 等地。推荐亚洲！<br><img src="https://51.ruyo.net/wp-content/uploads/2016/09/4.png" alt=""></p><p>PS : 静态IP只能申请一个！！！</p><h2 id="4-开启一个新的Project"><a href="#4-开启一个新的Project" class="headerlink" title="4.开启一个新的Project"></a>4.开启一个新的Project</h2><p>这边范例名称使用personal VPN<br><img src="https://upload-images.jianshu.io/upload_images/2968083-6b44ef610481cbb1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="image"></p><h2 id="5-建立VM执行个体"><a href="#5-建立VM执行个体" class="headerlink" title="5.建立VM执行个体"></a>5.建立VM执行个体</h2><ul><li><p>从左侧开启选单，寻找Compute Engine，找到VM执行个体<br><img src="https://upload-images.jianshu.io/upload_images/2968083-5785c7cb3254b162.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="image"></p></li><li><p>等待VM执行个体初始化完成<br><img src="https://upload-images.jianshu.io/upload_images/2968083-dc884f70e1746190.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="image"></p></li><li><p>选择建立<br><img src="https://upload-images.jianshu.io/upload_images/2968083-b56c6c195402d947.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/644" alt="image"></p></li><li><p>设定VM 名称以及位置与配备<br><img src="https://51.ruyo.net/wp-content/uploads/2016/09/5.png" alt="image"><br><img src="https://51.ruyo.net/wp-content/uploads/2016/09/6.png" alt=""></p></li></ul><h3 id="6-配置SSH"><a href="#6-配置SSH" class="headerlink" title="6.配置SSH"></a>6.配置SSH</h3><ul><li>需要点两下SSH </li></ul><p><img src="https://img-blog.csdn.net/20180119220707358?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2hvdXhpaGFv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><ol><li>第一步输入 “sudo -i “ ,获取root权限.</li></ol><p><img src="https://img-blog.csdn.net/20180119220733572?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2hvdXhpaGFv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>2. 第二步运行如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;teddysun&#x2F;shadowsocks_install&#x2F;master&#x2F;shadowsocks-go.sh</span><br><span class="line">chmod +x shadowsocks-go.sh</span><br><span class="line">.&#x2F;shadowsocks-go.sh 2&gt;&amp;1 | tee shadowsocks-go.log</span><br></pre></td></tr></table></figure><p>黏贴进去然后  回车 。执行完毕后</p><p><img src="/img/QQ20180505-133654.png" alt="image"></p><p>参考资料：</p><p><a href="https://51.ruyo.net/2144.html" target="_blank" rel="noopener">Google Cloud服务免费申请试用以及使用教程</a></p><p><a href="https://www.jianshu.com/p/9625bfbc1bf4" target="_blank" rel="noopener">Shadowsocks Python版一键安装脚本</a></p><p><a href="https://www.jianshu.com/p/6bd66829a1ce" target="_blank" rel="noopener">用Google Cloud搭建免费一年的SS</a></p><p><a href="https://blog.csdn.net/chouxihao/article/details/79111121" target="_blank" rel="noopener">用谷歌cloud搭建可以学上网方式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;手把手利用Google cloud platform 建立VPS&lt;/p&gt;
&lt;h2 id=&quot;1-准备工作&quot;&gt;&lt;a href=&quot;#1-准备工作&quot; class=&quot;headerlink&quot; title=&quot;1.准备工作&quot;&gt;&lt;/a&gt;1.准备工作&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;一张VISA信用
      
    
    </summary>
    
    
      <category term="技术,vps" scheme="https://iodefog.github.io/categories/%E6%8A%80%E6%9C%AF-vps/"/>
    
    
  </entry>
  
  <entry>
    <title>Git submodule(子项目)使用</title>
    <link href="https://iodefog.github.io/2018/11/06/git_submodules/"/>
    <id>https://iodefog.github.io/2018/11/06/git_submodules/</id>
    <published>2018-11-06T01:45:40.910Z</published>
    <updated>2018-11-06T01:45:40.910Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-submodule-子项目-使用"><a href="#Git-submodule-子项目-使用" class="headerlink" title="Git submodule(子项目)使用"></a>Git submodule(子项目)使用</h1><p>有种情况我们经常会遇到：某个工作中的项目需要包含并使用另一个项目。 也许是第三方库，或者你独立开发的，用于多个父项目的库。 现在问题来了：你想要把它们当做两个独立的项目，同时又想在一个项目中使用另一个。</p><p>1.从更新下载代码开始即使用了一个我没有用过的方式 submodules(子模块).</p><p>开始使用子模块<br>我们将要演示如何在一个被分成一个主项目与几个子项目的项目上开发。</p><p>我们首先将一个已存在的 Git 仓库添加为正在工作的仓库的子模块。 你可以通过在 git submodule add 命令后面加上想要跟踪的项目 URL 来添加新的子模块。 在本例中，我们将会添加一个名为 HLImagePicker 的库。</p><h2 id="添加子模块"><a href="#添加子模块" class="headerlink" title="添加子模块"></a>添加子模块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">✗ git submodule add https:&#x2F;&#x2F;github.com&#x2F;iodefog&#x2F;HLImagePicker</span><br><span class="line">Cloning into &#39;&#x2F;Users&#x2F;lhl&#x2F;Desktop&#x2F;Test&#x2F;HLImagePicker&#39;...</span><br><span class="line">remote: Counting objects: 190, done.</span><br><span class="line">remote: Compressing objects: 100% (44&#x2F;44), done.</span><br><span class="line">remote: Total 190 (delta 28), reused 49 (delta 18), pack-reused 126</span><br><span class="line">Receiving objects: 100% (190&#x2F;190), 103.92 KiB | 58.00 KiB&#x2F;s, done.</span><br></pre></td></tr></table></figure><p>如果这时运行 git status，你会注意到几件事。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">✗ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">new file:   .gitmodules</span><br><span class="line">new file:   HLImagePicker</span><br></pre></td></tr></table></figure><p>首先应当注意到新的 .gitmodules 文件。 该配置文件保存了项目 URL 与已经拉取的本地目录之间的映射：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> cat .gitmodules </span><br><span class="line">[submodule &quot;HLImagePicker&quot;]</span><br><span class="line">path &#x3D; HLImagePicker</span><br><span class="line">url &#x3D; https:&#x2F;&#x2F;github.com&#x2F;iodefog&#x2F;HLImagePicker</span><br></pre></td></tr></table></figure><p>在 git status 输出中列出的另一个是项目文件夹记录。 如果你运行 git diff，会看到类似下面的信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached xxxproject</span><br></pre></td></tr></table></figure><p>如果你想看到更漂亮的差异输出，可以给 git diff 传递 –submodule 选项。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached --submodule</span><br></pre></td></tr></table></figure><h2 id="克隆含有子模块的项目"><a href="#克隆含有子模块的项目" class="headerlink" title="克隆含有子模块的项目"></a>克隆含有子模块的项目</h2><p>接下来我们将会克隆一个含有子模块的项目。 当你在克隆这样的项目时，默认会包含该子模块目录，但其中还没有任何文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;iodefog&#x2F;Test</span><br></pre></td></tr></table></figure><p>clone 完毕</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> ls -a</span><br><span class="line">.              .git           HLImagePicker  Test.xcodeproj</span><br><span class="line">..             .gitmodules    Test</span><br><span class="line"></span><br><span class="line">Test git:(master) cd HLImagePicker </span><br><span class="line">➜  HLImagePicker git:(master) ls</span><br><span class="line">➜  HLImagePicker git:(master)</span><br></pre></td></tr></table></figure><p>其中有 HLImagePicker 目录，不过是空的。 你必须运行两个命令：git submodule init 用来初始化本地配置文件，而 git submodule update 则从该项目中抓取所有数据并检出父项目中列出的合适的提交。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git submodule init</span><br></pre></td></tr></table></figure><p>不过还有更简单一点的方式。 如果给 git clone 命令传递 –recursive 选项，它就会自动初始化并更新仓库中的每一个子模块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone --recursive https:&#x2F;&#x2F;github.com&#x2F;iodefog&#x2F;Test</span><br></pre></td></tr></table></figure><h2 id="在包含子模块的项目上工作"><a href="#在包含子模块的项目上工作" class="headerlink" title="在包含子模块的项目上工作"></a>在包含子模块的项目上工作</h2><p>现在我们有一份包含子模块的项目副本，我们将会同时在主项目和子模块项目上与队员协作。</p><p>拉取上游修改<br>在项目中使用子模块的最简模型，就是只使用子项目并不时地获取更新，而并不在你的检出中进行任何更改。 我们来看一个简单的例子。</p><p>子项目提交及更新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git pull</span><br><span class="line"> </span><br><span class="line">$ git commit -m&quot;xxx&quot;</span><br><span class="line"></span><br><span class="line">$ git push</span><br></pre></td></tr></table></figure><p>主项目更新子项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 更新某一个子项目</span><br><span class="line">$ git submodule update --remote SubModuleTest</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 更新所有子项目</span><br><span class="line">$ git submodule update --remote</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 更新服务器上的这个子模块有一个改动并且它被合并了进来</span><br><span class="line">git submodule update --remote --merge</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">git submodule update --remote --rebase</span><br></pre></td></tr></table></figure><p>其他人clone的项目更新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch</span><br><span class="line"></span><br><span class="line">$ git merge</span><br></pre></td></tr></table></figure><p>如果想要在子模块中查看新工作，可以进入到目录中运行 git fetch 与 git merge，合并上游分支来更新本地代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log -p --submodule  查看这个信息。</span><br></pre></td></tr></table></figure><p>启用项目子模块下的某分支，需要.gitmodules 文件中设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[submodule &quot;SubModuleTest&quot;]</span><br><span class="line">path &#x3D; SubModuleTest</span><br><span class="line">url &#x3D; ..&#x2F;SubModuleTest</span><br><span class="line">branch &#x3D; stable</span><br></pre></td></tr></table></figure><p>如果我们在主项目中提交并推送但并不推送子模块上的改动，其他尝试检出我们修改的人会遇到麻烦，因为他们无法得到依赖的子模块改动。 那些改动只存在于我们本地的拷贝中。</p><p>为了确保这不会发生，你可以让 Git 在推送到主项目前检查所有子模块是否已推送。 git push 命令接受可以设置为 “check” 或 “on-demand” 的 –recurse-submodules 参数。 如果任何提交的子模块改动没有推送那么 “check” 选项会直接使 push 操作失败。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push --recurse-submodules&#x3D;check</span><br></pre></td></tr></table></figure><p>另一个选项是使用 “on-demand” 值，它会尝试为你这样做。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push --recurse-submodules&#x3D;on-demand</span><br></pre></td></tr></table></figure><p>移除子项目, 仅仅执行“rm -Rf SubModuleTest/” 是不行的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm -r SubModuleTest</span><br></pre></td></tr></table></figure><p>参考：<a href="https://git-scm.com/book/zh/v2/Git-工具-子模块" target="_blank" rel="noopener">https://git-scm.com/book/zh/v2/Git-工具-子模块</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Git-submodule-子项目-使用&quot;&gt;&lt;a href=&quot;#Git-submodule-子项目-使用&quot; class=&quot;headerlink&quot; title=&quot;Git submodule(子项目)使用&quot;&gt;&lt;/a&gt;Git submodule(子项目)使用&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="技术" scheme="https://iodefog.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="git" scheme="https://iodefog.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>GitHub 修改语言到Objective-C</title>
    <link href="https://iodefog.github.io/2018/11/06/githubchanglanguage/"/>
    <id>https://iodefog.github.io/2018/11/06/githubchanglanguage/</id>
    <published>2018-11-06T01:45:40.910Z</published>
    <updated>2018-11-06T01:45:40.910Z</updated>
    
    <content type="html"><![CDATA[<p>GitHub 修改语言到Objective-C</p><p>1.进入到项目的根目录</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch .gitattributes</span><br></pre></td></tr></table></figure><p>2.往.gitattributes写入文件,将项目里最多的文件强制转换为所希望的语言</p><a id="more"></a><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*.swift linguist-language=objective-c</span><br><span class="line">*.c linguist-language=objective-c</span><br><span class="line">*.h linguist-language=objective-c</span><br><span class="line">*.m linguist-language=objective-c</span><br><span class="line">*.a linguist-language=objective-c</span><br></pre></td></tr></table></figure><p>3.push到GitHub上，刷新界面即可看到语言已经变成 objective-c</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GitHub 修改语言到Objective-C&lt;/p&gt;
&lt;p&gt;1.进入到项目的根目录&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;touch .gitattributes&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;2.往.gitattributes写入文件,将项目里最多的文件强制转换为所希望的语言&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://iodefog.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="GitHub,语言,language,object-c" scheme="https://iodefog.github.io/tags/GitHub-%E8%AF%AD%E8%A8%80-language-object-c/"/>
    
  </entry>
  
  <entry>
    <title>FFmpeg学习记录、整理</title>
    <link href="https://iodefog.github.io/2018/11/06/ffmpeghelper/"/>
    <id>https://iodefog.github.io/2018/11/06/ffmpeghelper/</id>
    <published>2018-11-06T01:45:40.909Z</published>
    <updated>2018-11-06T01:45:40.909Z</updated>
    
    <content type="html"><![CDATA[<p>“FFmpeg”这个单词中的“FF”指的是“Fast Forward”[2]。有些新手写信给“FFmpeg”的项目负责人，询问FF是不是代表“Fast Free”或者“Fast Fourier”等意思，“FFmpeg”的项目负责人回信说：“Just for the record, the original meaning of “FF” in FFmpeg is “Fast Forward”…”</p><a id="more"></a><p><a href="#">目录</a></p><ul><li><a href="#基本介绍">基本介绍</a></li><li><a href="#常用命令解析">常用命令解析</a></li><li><a href="#添加水印">添加水印</a></li></ul><hr><h1 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h1><h3 id="组成组件："><a href="#组成组件：" class="headerlink" title="组成组件："></a>组成组件：</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>ffmpeg</td><td>一个命令行工具，用来对视频文件转换格式，也支持对电视卡即时编码</td></tr><tr><td>ffserver</td><td>一个HTTP多媒体即时广播流服务器，支持时光平移</td></tr><tr><td>ffplay</td><td>一个简单的播放器，基于SDL与FFmpeg库</td></tr><tr><td>libavcodec</td><td>包含全部FFmpeg音频/视频编解码库</td></tr><tr><td>libavformat</td><td>包含demuxers和muxer库</td></tr><tr><td>libavutil</td><td>包含一些工具库</td></tr><tr><td>libpostproc</td><td>对于视频做前处理的库</td></tr><tr><td>libswscale</td><td>对于视频作缩放的库</td></tr></tbody></table><h3 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h3><p>FFmpeg可使用众多参数，参数内容会根据ffmpeg版本而有差异，使用前建议先参考参数及编解码器的叙述。此外，参数明细可用ffmpeg -h显示；编解码器名称等明细可用ffmpeg -formats显示。<br>下列为较常使用的参数：</p><ol><li>主要参数</li></ol><table><thead><tr><th>【参数】</th><th>【说明】</th><th>【示例】</th></tr></thead><tbody><tr><td>-i “路径”</td><td>指定需要转换的文件路径</td><td>-i ./mm.mp4</td></tr><tr><td>-f</td><td>设置输出格式。</td><td></td></tr><tr><td>-y</td><td>若输出文件已存在时则覆盖文件。</td><td></td></tr><tr><td>-fs</td><td>超过指定的文件大小时则结束转换。</td><td></td></tr><tr><td>-ss</td><td>从指定时间开始转换。</td><td></td></tr><tr><td>-t</td><td>从-ss时间开始转换（如-ss 00:00:01.00 -t 00:00:10.00即从00:00:01.00开始到00:00:11.00）。</td><td></td></tr><tr><td>-title</td><td>设置标题。</td><td></td></tr><tr><td>-timestamp</td><td>设置时间戳。</td><td></td></tr><tr><td>-vsync</td><td>增减Frame使影音同步。</td><td></td></tr></tbody></table><ol start="2"><li>视频参数</li></ol><table><thead><tr><th>【参数】</th><th>【说明】</th><th>【示例】</th></tr></thead><tbody><tr><td>-bitexac</td><td>使用标准比特率</td><td></td></tr><tr><td>-b</td><td>v——设置视频流量，默认为200Kbit/秒。指定压缩比特率（单位请引用下方注意事项）</td><td>-b 1500</td></tr><tr><td>-r</td><td>设置帧率值，默认为25。帧速率(非标准数值会导致音画不同步【标准值为15或29.97】)</td><td>-r 15</td></tr><tr><td>-s</td><td>设置画面的宽与高。指定分辨率大小</td><td>-s 320*240</td></tr><tr><td>-aspect</td><td>设置画面的比例。</td><td></td></tr><tr><td>-vn</td><td>不处理视频，于仅针对声音做处理时使用。</td><td></td></tr><tr><td>-vcodec xvid</td><td>使用xvid压缩</td><td></td></tr><tr><td>-vcodec( -c:v )</td><td>设置视频视频编解码器，未设置时则使用与输入文件相同之编解码器。</td><td></td></tr><tr><td>-qmin</td><td>设定最小质量</td><td>-qmin 10</td></tr><tr><td>-qmax</td><td>与-qmin相反，可以与-qmin同时使用</td><td>-qmax 30</td></tr><tr><td>-sameq</td><td>使用与源视频相同的质量</td><td></td></tr></tbody></table><ol start="3"><li>声音参数</li></ol><table><thead><tr><th>【参数】</th><th>【说明】</th><th>【示例】</th></tr></thead><tbody><tr><td>-b:a</td><td>设置每Channel（最近的SVN版为所有Channel的总合）的流量。（单位请引用下方注意事项）</td><td></td></tr><tr><td>-ar</td><td>设定声音采样率(8000，11025，22050)</td><td>-ar 22050</td></tr><tr><td>-ac</td><td>设定声道数：1为单声道，2为立体声</td><td>-ac 2</td></tr><tr><td>-acodec aac</td><td>设置声音编解码器，未设置时与视频相同，使用与输入文件相同之编解码器。</td><td></td></tr><tr><td>-an</td><td>不处理声音，于仅针对视频做处理时使用。</td><td></td></tr><tr><td>-vol</td><td>设置音量大小，256为标准音量。（要设置成两倍音量时则输入512，依此类推。）</td><td></td></tr><tr><td>-ab &lt;比特率&gt;</td><td>设定声音比特率(-ac设为立体声时要以一半比特率来设置，比如192kbps的就设成96)</td><td>-ab 96</td></tr></tbody></table><ul><li>注意事项<br>以-b:v及-b:a首选项流量时，根据使用的ffmpeg版本，须注意单位会有kbits/sec与bits/sec的不同。（可用ffmpeg -h显示说明来确认单位。）<br>例如，单位为bits/sec的情况时，欲指定流量64kbps时需输入 -b:a 64k；单位为kbits/sec的情况时则需输入 -b:a 64。<br>以-acodec及-vcodec所指定的编解码器名称，会根据使用的ffmpeg版本而有所不同。例如使用AAC编解码器时，会有输入aac与libfaac的情况。此外，编解码器有分为仅供解码时使用与仅供编码时使用，因此一定要利用ffmpeg -formats确认输入的编解码器是否能运作。</li></ul><p><a href="https://zh.wikipedia.org/wiki/FFmpeg" target="_blank" rel="noopener">参考wiki百科</a></p><hr><h1 id="常用命令解析"><a href="#常用命令解析" class="headerlink" title="常用命令解析"></a>常用命令解析</h1><p>下载一个视频到本地并转换为MP4类型  ffmpeg -i 远程url或者本地视频  到本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i http://videodata.url ./成都日本版.mp4</span><br></pre></td></tr></table></figure><p>下载一个视频到本地并转换成mp3类型  ffmpeg -i 远程url或者本地视频  到本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i http://videodata.url ./成都日本版.mp4</span><br></pre></td></tr></table></figure><p>【转换文件格式的同时抓缩微图】   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i &quot;test.avi&quot; -y -f image2 -ss 8 -t 0.001 -s 350x240 &quot;test.jpg&quot;</span><br></pre></td></tr></table></figure><p>讲解： -i 后面跟输入文件  -y 覆盖  -f 转换格式为image2  -ss 起点 -t 时长  -s 指定分辨率大小  “test.jpg” 最后生成的文件</p><p>【对已有flv抓图】   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i &quot;test.flv&quot; -y -f image2 -ss 8 -t 0.001 -s 350x240 &quot;test.jpg&quot;</span><br></pre></td></tr></table></figure><p>-ss后跟的时间单位为秒</p><hr><h1 id="添加水印"><a href="#添加水印" class="headerlink" title="添加水印"></a>添加水印</h1><h3 id="1-添加图片水印"><a href="#1-添加图片水印" class="headerlink" title="1. 添加图片水印"></a>1. 添加图片水印</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 添加图片水印</span><br><span class="line">  ffmpeg -i inputfile -vf  &quot;movie&#x3D;masklogo,scale&#x3D; 60: 30[watermask]; [in] [watermask] overlay&#x3D;30:10 [out]&quot; outfile</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;  在视频mm.mp4上添加水印图64.png 位置为右上角，输出新文件为mm1.mp4</span><br><span class="line">ffmpeg -i mm.mp4 -vf &quot;movie&#x3D;64.png ,scale&#x3D;64*64[watermask];[in][watermask] overlay&#x3D;main_w-overlay_w-40:30 [out]&quot; .&#x2F;mm1.mp4</span><br></pre></td></tr></table></figure><p>marklogo:添加的水印图片；</p><p>scale：水印大小，水印长度＊水印的高度；</p><p>overlay：水印的位置，距离屏幕左侧的距离＊距离屏幕上侧的距离；mainW主视频宽度， mainH主视频高度，overlayW水印宽度，overlayH水印高度</p><p>　　左上角overlay参数为 overlay=0:0</p><p>　　右上角为 overlay= main_w-overlay_w:0</p><p>　　右下角为 overlay= main_w-overlay_w:main_h-overlay_h</p><p>　　左下角为 overlay=0: main_h-overlay_h</p><p> 上面的0可以改为5，或10像素，以便多留出一些空白。</p><h3 id="2-水印合流"><a href="#2-水印合流" class="headerlink" title="2. 水印合流"></a>2. 水印合流</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input -i logo -filter_complex &#39;overlay&#x3D;10:main_h-overlay_h-10&#39; output</span><br></pre></td></tr></table></figure><p>input:输入流</p><p>logo：水印文件，也可以是一个流。</p><p>注意：需要编译时把相应的解码器编译。例如PNG图片。需要编译PNG解码器。Ffmpeg才能够识别图片文件，把图片做为一 种流。注意：PNG图片必须含有alpha通道。Overlay过滤器是根据alpha通道来进行复盖的。所以，你想要透明效果时，须先制做一张透明的PNG图片。</p><p>output：输出流</p><p>也可以用下面命令：  ffmpeg -i input  -vf ‘movie=long.png[logo];[in][logo]overlay=10:10[out]’ output     ，movie过滤器用来把两个流组合成一个流。它有一个输出PAD。</p><h3 id="字幕文件转换"><a href="#字幕文件转换" class="headerlink" title="字幕文件转换"></a>字幕文件转换</h3><p>字幕文件有很多种，常见的有 .srt , .ass 文件等,下面使用FFmpeg进行相互转换。</p><ul><li>将.srt文件转换成.ass文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i subtitle.srt subtitle.ass</span><br></pre></td></tr></table></figure><p>将.ass文件转换成.srt文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i subtitle.ass subtitle.srt</span><br></pre></td></tr></table></figure><p>集成字幕，选择播放</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -i subtitles.srt -c:s mov_text -c:v copy -c:a copy output.mp4</span><br></pre></td></tr></table></figure><p>解析：<br>-c:s 设置字幕解码器。未设置是字幕解码与输入文件相同<br>-c:v 设置视频视频编解码器，未设置时则使用与输入文件相同之编解码器<br>-c:a 设置声音编解码器，未设置时与视频相同，使用与输入文件相同之编解码器。</p><ul><li>嵌入SRT字幕到视频文件</li></ul><p>单独SRT字幕<br>字幕文件为subtitle.srt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i video.avi -vf subtitles&#x3D;subtitle.srt out.avi</span><br></pre></td></tr></table></figure><p>嵌入在MKV等容器的字幕<br>将video.mkv中的字幕（默认）嵌入到out.avi文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i video.mkv -vf subtitles&#x3D;video.mkv out.avi</span><br></pre></td></tr></table></figure><p>将video.mkv中的字幕（第二个）嵌入到out.avi文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i video.mkv -vf subtitles&#x3D;video.mkv:si&#x3D;1 out.avi</span><br></pre></td></tr></table></figure><p>嵌入ASS字幕到视频文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i video.avi -vf &quot;ass&#x3D;subtitle.ass&quot; out.avi</span><br></pre></td></tr></table></figure><p>不能加载fontconfig文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Fontconfig error: Cannot load default config file</span><br><span class="line">[Parsed_ass_0 @ 0000000002bfa3e0] No usable fontconfig configuration file found,</span><br><span class="line"> using fallback.</span><br><span class="line">Fontconfig error: Cannot load default config file</span><br></pre></td></tr></table></figure><p>出现类似错误的原因是无法加载字体配置文件。</p><hr><p>其他常用命令</p><ol><li>提取视频 （Extract Video）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i Life.of.Pi.has.subtitles.mkv -vcodec copy –an  videoNoAudioSubtitle.mp4</span><br></pre></td></tr></table></figure>参考：<a href="http://www.cnblogs.com/wainiwann/p/4128154.html" target="_blank" rel="noopener">http://www.cnblogs.com/wainiwann/p/4128154.html</a></li><li>提取音频（Extract Audio）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i Life.of.Pi.has.subtitles.mkv -vn -acodec copy audio.ac3</span><br></pre></td></tr></table></figure>参考：<a href="http://stackoverflow.com/questions/9913032/ffmpeg-to-extract-audio-from-video" target="_blank" rel="noopener">http://stackoverflow.com/questions/9913032/ffmpeg-to-extract-audio-from-video</a></li><li>提取字幕（Extract Subtitle）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i Life.of.Pi.has.subtitles.mkv-map 0:s:0 sub1.srt</span><br></pre></td></tr></table></figure>参考：<a href="http://superuser.com/questions/583393/extract-subtitle-from-video" target="_blank" rel="noopener">http://superuser.com/questions/583393/extract-subtitle-from-video</a></li></ol><hr><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“FFmpeg”这个单词中的“FF”指的是“Fast Forward”[2]。有些新手写信给“FFmpeg”的项目负责人，询问FF是不是代表“Fast Free”或者“Fast Fourier”等意思，“FFmpeg”的项目负责人回信说：“Just for the record, the original meaning of “FF” in FFmpeg is “Fast Forward”…”&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://iodefog.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="ffmpeg, player" scheme="https://iodefog.github.io/tags/ffmpeg-player/"/>
    
  </entry>
  
  <entry>
    <title>不注册使用cleanmymac</title>
    <link href="https://iodefog.github.io/2018/11/06/cleanmymac/"/>
    <id>https://iodefog.github.io/2018/11/06/cleanmymac/</id>
    <published>2018-11-06T01:45:40.908Z</published>
    <updated>2018-11-06T01:45:40.908Z</updated>
    
    <content type="html"><![CDATA[<p>不注册使用cleanmymac</p><p>1.首先下载<a href="https://setapp.com/" target="_blank" rel="noopener">setapp</a><br>2.安装完成登录后，找到cleanmymac</p><a id="more"></a><p><img src="/img/cleanmymac.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不注册使用cleanmymac&lt;/p&gt;
&lt;p&gt;1.首先下载&lt;a href=&quot;https://setapp.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;setapp&lt;/a&gt;&lt;br&gt;2.安装完成登录后，找到cleanmymac&lt;/p&gt;
    
    </summary>
    
    
      <category term="mac" scheme="https://iodefog.github.io/categories/mac/"/>
    
    
  </entry>
  
  <entry>
    <title>crackwifi</title>
    <link href="https://iodefog.github.io/2018/11/06/crackwifi/"/>
    <id>https://iodefog.github.io/2018/11/06/crackwifi/</id>
    <published>2018-11-06T01:45:40.908Z</published>
    <updated>2018-11-06T01:45:40.908Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mac-osx-破解wpa-wpa2-wifi"><a href="#mac-osx-破解wpa-wpa2-wifi" class="headerlink" title="mac osx 破解wpa/wpa2 wifi"></a>mac osx 破解wpa/wpa2 wifi</h1><hr><blockquote><p>首先要安装aircrack-ng工具<br>可以使用Homebrew进行安装</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install aircrack-ng</span><br></pre></td></tr></table></figure><blockquote><p>第二步，我们将 airport 命令引入到用户命令里，在终端输入：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s &#x2F;System&#x2F;Library&#x2F;PrivateFrameworks&#x2F;Apple80211.framework&#x2F;Versions&#x2F;Current&#x2F;Resources&#x2F;airport &#x2F;usr&#x2F;local&#x2F;bin&#x2F;airport</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>第三步，用airport搜索附近wifi</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo airport -s</span><br></pre></td></tr></table></figure><p>结果如下图所示:<br><img src="/img/airport_s.png" alt="image"></p><blockquote><p>第四步，根据搜索出的wifi进行嗅探</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo airport  en0 sniff  1</span><br></pre></td></tr></table></figure><p>上面的en0为wifi card所在的地址, 有的也可能为en1, 可以根据实际情况输入, 可从以下地方获得:<br><img src="/img/wificard_addr.png" alt="image"></p><p>1为你所要嗅探的wifi所在的CHANNEL.<br>默认嗅探的所存的文件在/tmp中, 以airportSniff**.cap形式命名.<br>wordlist 为wifi密码字典</p><blockquote><p>第五步，就是使用aircrack-ng和下载的密码字典进行暴力破解</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aircrack-ng -w wordlist airportSniff****.cap</span><br></pre></td></tr></table></figure><p>一般输入如下所示:<br><img src="/img/aircrack-ng.png" alt="image"></p><p>最后看上面cap文件内的抓包内容, Encryption列中找到WPA (1 handshake)—它表示抓包成功. 当然要找到你想破解wifi的成功抓包, 然后在「Index number of target network?」中输入该成功抓包所在的行号. 此示例中为1:<br><img src="/img/index-number.png" alt="image"></p><p>破解过程如下:<br><img src="/img/running.png" alt="image"></p><p>如果破解成功, 会显示 KEY FOUND!:<br><img src="/img/aircrack-ng-success.jpg" alt="image"></p><p>密码词典：<a href="https://pan.baidu.com/s/1geH8EAn" target="_blank" rel="noopener">https://pan.baidu.com/s/1geH8EAn</a></p><p>参考：<a href="http://qiangweng.site/" target="_blank" rel="noopener">http://qiangweng.site/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;mac-osx-破解wpa-wpa2-wifi&quot;&gt;&lt;a href=&quot;#mac-osx-破解wpa-wpa2-wifi&quot; class=&quot;headerlink&quot; title=&quot;mac osx 破解wpa/wpa2 wifi&quot;&gt;&lt;/a&gt;mac osx 破解wpa/wpa2 wifi&lt;/h1&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;首先要安装aircrack-ng工具&lt;br&gt;可以使用Homebrew进行安装&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;brew install aircrack-ng&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;第二步，我们将 airport 命令引入到用户命令里，在终端输入：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo ln -s &amp;#x2F;System&amp;#x2F;Library&amp;#x2F;PrivateFrameworks&amp;#x2F;Apple80211.framework&amp;#x2F;Versions&amp;#x2F;Current&amp;#x2F;Resources&amp;#x2F;airport &amp;#x2F;usr&amp;#x2F;local&amp;#x2F;bin&amp;#x2F;airport&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
